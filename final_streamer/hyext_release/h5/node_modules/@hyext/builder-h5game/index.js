const fs = require('fs-extra')
const path = require('path')
const inquirer = require('inquirer')
const chalk = require('chalk')
const R = require('ramda')
const upath = require('upath')

const { buildH5Game } = require('./build/buildH5Game.js')
const { server } = require('./start/server.js')
const { release } = require('./release')

async function createApp({ contextPath, projectName, buildTypes }) {
  const h5Dir = await inquirer.prompt([
    {
      type: 'input',
      name: 'h5Dir',
      message: '请输入 h5 代码所在的目录',
      default: './h5',
      validate: anwser => {
        if (!anwser) {
          console.log(chalk.red('h5 代码所在目录不能为空'))
          return false
        }

        if (anwser === './' || anwser === '') {
          console.log(chalk.red('h5 代码所在目录不能为当前目录'))
          return false

        }
        return true
      },
    },
  ]).then(anwser => anwser.h5Dir)


  return {
    config: {
      webTitle: projectName,
      h5Dir,
      buildConfig: buildTypes,
    },
    outputPath: 'hyext_dist',
    releasePath: 'hyext_release',
  }
}

function providedProjectConfig() {
  return {
    ignore: [
      'hyext_release',
      'release',
    ],
  }
}

function start({ projectName, inputPath, outputPath, config }) {
  // console.log('config', config)
  const { h5Dir } = config

  return server({
    projectDir: inputPath,
    projectName,
    h5Dir: upath.join(inputPath, h5Dir),
    outputDir: outputPath,
    config,

    engineType: 'h5game',
  })
}

async function verifyApp() {
  return true
}

function config({ contextPath, projectName, builderConfig, buildTypes }) {
  return {
    config: {
      ...builderConfig,
      config: {
        ...builderConfig.config,
        buildConfig: buildTypes,
      }
    }
  }
}


function build({ projectName, config, inputPath, outputPath, publicPath, extVersion, extVersionId, extName, extUuid }) {
  // const projectConfig = fs.readJsonSync(path.resolve(inputPath, 'project.config.json'))

  const { h5Dir } = config

  return buildH5Game({
    extUuid,
    extName,
    projectDir: inputPath,
    // 同一个小程序可以包含多个项目(小程序名称一样, 但是项目名称不一样). 所以用项目名称做模板的文件夹名称更稳妥
    launcherDir: path.resolve(inputPath, '..', '..', `launcher-${path.basename(inputPath)}-${extVersion}`),

    // 游戏引擎输出的 h5 文件夹路径
    h5Dir: path.join(inputPath, h5Dir),

    outputDir: outputPath,
    publicPath,
    config,
    extVersion,
    extVersionId,

    engineType: 'h5game',
  })
}

module.exports = {
  createApp,
  providedProjectConfig,
  start,
  verifyApp,
  build,
  config,
  release,

  server,
  buildH5Game,
}

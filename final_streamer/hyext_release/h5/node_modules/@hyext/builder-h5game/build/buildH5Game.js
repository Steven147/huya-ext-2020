const path = require('path')
const os = require('os')
const fs = require('fs-extra')
const R = require('ramda')

// const { buildH5 } = require('../lib/buildH5.js')
const { buildMainEntry } = require('../lib/buildMainEntry.js')
const { buildHyGame } = require('../lib/buildHyGame.js')
const { bundleRN } = require('./bundleRN.js')
const { generateBuildResult } = require('./generateBuildResult.js')
const { HINT, ERROR } = require('../utils/utils.js')
const { transformEs6 } = require('../lib/transformEs6')
const { generateHtmlFromBuildConfig } = require('../lib/generateHtmlFromBuildConfig')

async function buildH5Game({
  extUuid,
  extName,

  // 输入的 h5 文件夹路径
  h5Dir,

  launcherDir,

  projectDir,
  outputDir,
  config,
  publicPath,
  extVersion = '0.0.1',
  extVersionId = 0,

  // 向 game-launcher 传递的参数之一
  engineType,
}) {

  // 输出目录中的 h5 文件夹路径
  const h5OutputDir = path.resolve(outputDir, 'h5')
  const rnOutputDir = path.resolve(outputDir, 'rn')

  await fs.remove(h5OutputDir)
  await fs.copy(h5Dir, h5OutputDir)

  // 生成多个 html, 注入 sdk/taf/改title
  const entryHtmlDict = generateHtmlFromBuildConfig({
    extUuid,
    extName,
    extVersion,
    extVersionId,
    config,
    entryPath: path.resolve(h5OutputDir, 'index.html'),
    outputDir: h5OutputDir,
  })

  // 这里和开发环境不同(没有 watch), 转化 es6 的操作放到提取行内 script 之后
  if (config.convertEs6 === false) {
    HINT(`\nHYEXT: 跳过 es6=>es5 的转化`)
  } else {
    // 转成 es5
    HINT(`\nHYEXT: 将文件夹转成 es5`)
    HINT(`\nHYEXT: convert es6: ${h5OutputDir}`)
    await transformEs6({
      inputDir: h5OutputDir,
      outputDir: h5OutputDir,
    })
  }


  const getBuildConfig = R.compose(
    R.defaultTo([]),
    R.prop('buildConfig'),
  )
  const buildConfig = getBuildConfig(config)
  let bundleInfo = {}
  let hygInfo = {
    hygName: '',
    hygSize: '',
    hygMd5: '',
  }

  // 不是所有的项目都需要构建 rn
  if (buildConfig.some(({ platform }) => platform === 'app')) {
    fs.ensureDirSync(rnOutputDir)

    const entryPath = path.resolve(h5OutputDir, 'index.html')
    const seperator = publicPath.endsWith('/') ? '' : '/'

    await buildMainEntry({ entryPath })

    // 生成 extUuid-extVersionId.hyg 以及 extUuid-extVersionId.md5
    hygInfo = await buildHyGame({
      extUuid,
      extVersionId,
      extVersion,
      mainEntryDir: h5OutputDir,
      outputDir: rnOutputDir,
    })


    bundleInfo = await bundleRN({
      projectDir,
      config,
      launcherDir,
      hygFileList: [hygInfo.hygName],
      extUuid,
      extVersion,
      buildConfig: buildConfig.filter(({ platform }) => platform === 'app'),
      outputDir: rnOutputDir,
      // publicPath 用于访问 rn 引入的图片资源
      publicPath: `${publicPath}${seperator}rn`,
      engineType,
    })
  }

  const { hygSize, hygMd5 } = hygInfo

  const buildResult = generateBuildResult({ extUuid, extVersionId, extName, publicPath, buildConfig, bundleInfo, hygSize, hygMd5, entryHtmlDict, engineType })

  HINT('\nHYEXT-H5Game: buildResult:')
  console.dir(buildResult, { depth: null })
  return buildResult
}

module.exports = {
  buildH5Game,
}

const R = require('ramda')
const constants = require('../constants.js')

function generateDevBuildResult({ buildConfig, publicPath, buildTypes, launcherConfig, entryHtmlDict, engineType }) {
  const getBundleUrl = ({ component, platform }) => `rnentry=${component}&platform=${platform}&rnext=1&hyaction=newrn`

  let buildResult = {}

  const seperator = publicPath.endsWith('/') ? '' : '/'

  const buildH5 = buildTypes.includes('pc') || buildTypes.includes('web')
  const buildRN = buildTypes.includes('app')

  buildConfig.forEach(({ extType, platform }) => {
    if (['pc', 'web'].includes(platform) && buildH5) {
      const result = {
        [extType]: {
          type: 'MINI_GAME_H5',
          builder: `@hyext/builder-${engineType}`,
          content: {
            engine: engineType,
            baseURI: `${publicPath}${seperator}`,
            pages: [
              {
                path: `h5/${entryHtmlDict[extType]}`,
              },
            ],
          },
        },
      }

      buildResult = R.mergeDeepLeft(
        result,
        buildResult,
      )
    }

    if (platform === 'app' && buildRN) {
      const mobileP = ['ios', 'android']

      const { entries, SDK = {} } = launcherConfig
      const { entry, registerComponent } = entries[extType] || entries.default
      const isBuildingStremerBundle = extType.startsWith('zs_')

      const SDKVersion = SDK[isBuildingStremerBundle ? 'streamer' : 'kiwi'] || constants.SDKVersion

      mobileP.forEach(mobilePlatform => {
        const result = {
          [extType]: {
            type: 'MINI_GAME_RN',
            builder: `@hyext/builder-${engineType}`,
            content: {
              engine: engineType,
              sdkVersion: SDKVersion,
              baseURI: `${publicPath}${seperator}`,
              rnBundle: {
                [mobilePlatform]: {
                  path: entry.replace(/\.js$/ig, '.bundle'),
                  entries: [
                    {
                      name: registerComponent,
                      url: getBundleUrl({ component: registerComponent, platform: mobilePlatform }),
                    },
                  ],
                },
              },
            },
          },
        }

        buildResult = R.mergeDeepLeft(
          result,
          buildResult,
        )
      })
    }
  })

  // console.log(`LAYA: buildResult: ${JSON.stringify(buildResult, null, 2)}`)
  return buildResult
}

module.exports = {
  generateDevBuildResult,
}

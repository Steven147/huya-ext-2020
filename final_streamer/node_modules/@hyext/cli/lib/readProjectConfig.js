const path = require('path')
const defaultConfig = require('./default.config.json')

/*
 * 项目配置的构成：用户配置 > Builder提供的配置 > 默认配置
 */
module.exports = function (root) {
  const ROOT = root || process.cwd()
  const projectCfg = require( path.resolve(ROOT, 'project.config.json') )
  const builder = require( path.resolve(ROOT, 'node_modules', projectCfg.builder.name) )
  const builderProvidedProjectConfig = builder.providedProjectConfig() || {};

  /*
   * 使用白名单机制，执行最少权限原则
   */
  let providedProjectConfig = {}

  ;(['ignore']).forEach(key => {
    const val = builderProvidedProjectConfig[key]

    if (typeof val != 'undefined') {
      providedProjectConfig[key] = val
    }
  });

  let config = Object.assign({}, defaultConfig, providedProjectConfig, projectCfg)

  /*
   * 始终将 outputPath 和 releasePath 加入 ignore
   */
  addIgnoreDir(config.outputPath)
  addIgnoreDir(config.releasePath)

  function addIgnoreDir (p) {
    const relativePath = path.relative(ROOT, p)

    if ( !path.isAbsolute(relativePath) && relativePath.slice(0, 2) != '..' ) {
      const posixPath = path.posix.join.apply( path.posix, relativePath.split(path.sep) )
      config.ignore.push(`${posixPath}/**`)
    } 
  }

  /*
   * 有些字段需要特殊处理
   */

  // ignore 需要合并而不是替换
  if (builderProvidedProjectConfig.ignore && builderProvidedProjectConfig.ignore.length) {
    config.ignore = config.ignore.concat(builderProvidedProjectConfig.ignore)
  }

  // normalize
  (['outputPath', 'releasePath']).forEach(key => {
    const p = config[key]
    config[key] = path.isAbsolute(p) ? path.resolve(p) : path.resolve(ROOT, p)
  })

  config.inputPath = ROOT
  config.publicPath = `https://dev.hyext-cli.com:6666/static/`

  return config
}

import {
  NativeModules,
  Platform,
  DeviceEventEmitter,
  NativeEventEmitter
} from 'react-native';

const NativeExtPlayer = NativeModules.HYExtPlayer;

export const canplay = "canplay";
export const pause = "pause";
export const playing = "playing";
export const ended = "ended";
export const timeupdate = "timeupdate";
export const waiting = "waiting";
export const loadedmetadata = "loadedmetadata";
export const videoFrameReduceStart = "videoFrameReduceStart";
export const videoFrameGrowEnd = "videoFrameGrowEnd";

const hyExtPlayerVideoEvents = new Array(canplay, pause, playing, ended, timeupdate, waiting, loadedmetadata);
const hyExtPlayerEvents = new Array(videoFrameReduceStart, videoFrameGrowEnd);
class ExtPlayer {

  constructor() {
    this._nativeEventListeners = new Map();
    this._nativeExtPlayer = undefined;
  }

  nativeExtPlayer() {
    if (this._nativeExtPlayer == undefined) {
      this._nativeExtPlayer = new NativeEventEmitter(NativeExtPlayer);
    }
    return this._nativeExtPlayer;
  }

  playVideo(params) {
    return NativeExtPlayer.playVideo(params);
  }

  getVideoInfo() {
    return NativeExtPlayer.getVideoInfo();
  }

  fastForward(param) {
    return NativeExtPlayer.fastForward(param);
  }

  fastBackward(param) {
    return NativeExtPlayer.fastBackward(param);
  }

  resumeLive() {
    return NativeExtPlayer.resumeLive();
  }

  getFrameData() {
    return NativeExtPlayer.getFrameData();
  }

  tapped(location) {
    return NativeExtPlayer.tapped(location);
  }

  doubleTapped(location) {
    return NativeExtPlayer.doubleTapped(location);
  }

  setBufferTime(param){
    return NativeExtPlayer.setBufferTime(param);
  }


    setViewport(params){
      return NativeExtPlayer.setViewport(params);
      }

    addViewport(params){
      return NativeExtPlayer.addViewport(params);
      }
      
    getViewport(){
      return NativeExtPlayer.getViewport();
    }
    /*  
    switchLine(param){
      return NativeExtPlayer.switchLine(param);
    }
      
    getLinesInfo(){
      return NativeExtPlayer.getLinesInfo();
    }
      
    getCurrentLine(){
      return NativeExtPlayer.getCurrentLine();
    }
    */

   getVideoPosition(){
    return NativeExtPlayer.getVideoPosition();
   }

   getLayoutInfo(){
    return NativeExtPlayer.getLayoutInfo();
   }

   getVideoState(){
    return NativeExtPlayer.getVideoState();
   }

    on(event, callback) {
    if (hyExtPlayerVideoEvents.indexOf(event) != -1 || hyExtPlayerEvents.indexOf(event) != -1) {
       return this._addEventListener(callback, event, callback);
      }
    }

  off(event, callback) {
    if (hyExtPlayerVideoEvents.indexOf(event) != -1 || hyExtPlayerEvents.indexOf(event) != -1) {
      return this._removeEventListener(callback, event);
    }
  }

  async _addEventListener(listener, eventName, callback) {
    const promise = new Promise(function (resolve, reject) {
      if (!listener || !eventName || !callback) {
        reject(new Error("addEventListener fail"));
      }
      else {
        resolve("addEventListener succ");
      }
    })
    if (listener && eventName && callback) {
      if (Platform.OS == 'android') {
        //确定Listener和Name-Subscription的对应关系
        //与iOS的区别在于，我们用的RN框架的接口，所以参数需要另外加
        let subscription = DeviceEventEmitter.addListener(eventName, callback);
        NativeExtPlayer.addVodStateObserver(eventName);
        let nameMap = this._nativeEventListeners.get(listener);
        if (nameMap) {
          if (nameMap.has(eventName)) {
            nameMap.get(eventName).remove();
          }
          nameMap.set(eventName, subscription)
        } else {
          nameMap = new Map();
          nameMap.set(eventName, subscription)
          this._nativeEventListeners.set(listener, nameMap);
        }
      } else {
        this._addEventEmitterListenerIfNeed();
        let listeners = this._nativeEventListeners.get(eventName);
        if (!listeners) {
          if(hyExtPlayerVideoEvents.indexOf(eventName) != -1) {
          NativeExtPlayer.registerVodStatus(eventName);
          }else if(hyExtPlayerEvents.indexOf(eventName) != -1){
            NativeExtPlayer.addEventListener(eventName);
          }
          listeners = new Map();
          this._nativeEventListeners.set(eventName, listeners);
        }
        listeners.set(listener, callback);
      }
    }
    return promise;
  }

  async _removeEventListener(listener, eventName) {
    const promise = new Promise(function (resolve, reject) {
      if (!listener || !eventName || this._nativeEventListeners.size == 0) {
        reject(new Error("removeEventListener fail"));
      }
      else {
        resolve("removeEventListener succ");
      }
    })
    if (listener && eventName && this._nativeEventListeners.size != 0) {
      if (Platform.OS == 'android') {
        let nameMap = this._nativeEventListeners.get(listener);
        if (nameMap) {
          let subscription = nameMap.get(eventName);
          if (subscription) {
            subscription.remove();
            nameMap.delete(eventName);
          //  NativeExtPlayer.removeVodStateObserver(eventName);
          }
        }
      } else {
        let listeners = this._nativeEventListeners.get(eventName);
        if (listeners) {
          listeners.delete(listener);
          if (listeners.size == 0) {
            this._nativeEventListeners.delete(eventName);
            if (hyExtPlayerVideoEvents.indexOf(eventName) != -1) {
              NativeExtPlayer.unregisterVodStatus(eventName);
            }else if(hyExtPlayerEvents.indexOf(eventName) != -1){
              NativeExtPlayer.removeEventListener(eventName);
            }
          }
        }
        this._removeEventEmitterListenerIfNeed();
      }
    }
    return promise;
  }



  _addEventEmitterListenerIfNeed() {
    if (this._nativeEventListeners.size == 0) {
      this._nativeEventEmitter = this.nativeExtPlayer().addListener(
        'hyExtPlayerEvent',
        (reminder) => {
          this._dispatchEvent(reminder);
        }
      )
    }
  }

  _removeEventEmitterListenerIfNeed() {
    if (this._nativeEventListeners.size == 0) {
      this._nativeEventEmitter.remove();
    }
  }

  _dispatchEvent(reminder) {
    if(reminder.vodStatus){
      let vodStatus = reminder.vodStatus;
      let listeners = this._nativeEventListeners.get(vodStatus);
      if (!listeners) {
        return;
      }
  
      for (let key of listeners.keys()) {
        let callback = listeners.get(key);
        callback();
      }
    }else{
      let name = reminder.name;
      let params = reminder.params;
      let listeners = this._nativeEventListeners.get(name);
      if (!listeners) {
          return;
      }
      for (let key of listeners.keys()) {
          let callback = listeners.get(key);
          callback(params);
      }
    }

  }

}

const HYExtPlayer = new ExtPlayer();

export default HYExtPlayer;
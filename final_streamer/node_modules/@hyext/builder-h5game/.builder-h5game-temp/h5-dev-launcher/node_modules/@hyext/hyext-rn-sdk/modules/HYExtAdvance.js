/** 
 * @author: Huya
 * @date: 2019-09-03 14:25:50
 */

/**
* HYExtAdvance
* @namespace HYExtAdvance
*/
/*
import {
    NativeModules,
} from 'react-native';

export default NativeModules.HYExtAdvance;
*/
import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';

const NativeExtAdvance = NativeModules.HYExtAdvance;


class ExtAdvance {
    constructor() {
        this._nativeEventListeners = new Map();
        this._nativeExtAdvance = undefined;
    }

    nativeExtAdvance() {
        if (this._nativeExtAdvance == undefined) {
            this._nativeExtAdvance = new NativeEventEmitter(NativeExtAdvance);
        }
        return this._nativeExtAdvance;
    }


    async currentChannelInfo() {
        if(Platform.OS == 'android'){
            try{  
                let channelInfo = await NativeExtAdvance.currentChannelInfo();
                channelInfo.presenterId = parseInt(channelInfo.presenterId);
                channelInfo.currentUid = parseInt(channelInfo.currentUid);
                channelInfo.durationAfterJoinSuccess = parseInt(channelInfo.durationAfterJoinSuccess);
                return channelInfo;
             }
                catch (error) {
                   throw (error); 
             }
        }
        else{
            return NativeExtAdvance.currentChannelInfo();
        }
    }

    showLogin(param) {
        return NativeExtAdvance.showLogin(param);
    }

    async getCurrentUserInfo() {
        if(Platform.OS == 'android'){
            try{  
                let userInfo = await NativeExtAdvance.getCurrentUserInfo();
                userInfo.uid = parseInt(userInfo.uid);
                userInfo.imid = parseInt(userInfo.imid);
                userInfo.userCurrentExp = parseInt(userInfo.userCurrentExp);
                userInfo.nextLevelExp = parseInt(userInfo.nextLevelExp);
                userInfo.dailyExp = parseInt(userInfo.dailyExp);
                return userInfo;
             }
                catch (error) {
                   throw (error); 
             }
        }
        else{
            return NativeExtAdvance.getCurrentUserInfo();
        }
    }

    addActionEventWithExtraInfo(prod, eid, label, extraInfo) {
        return NativeExtAdvance.addActionEventWithExtraInfo(prod, eid, label, extraInfo);
    }

    openUrl(param) {
        return NativeExtAdvance.openUrl(param);
    }

    getTid() {
        return NativeExtAdvance.getTid();
    }

    sendWup(cfg, strategy) {
        return NativeExtAdvance.sendWup(cfg, strategy);
    }

    onWupMessage(options,callback) {
        return this._addEventListener(callback, "onWupMessage", callback, options);
    }

    sendGift(params) {
        return NativeExtAdvance.sendGift(params);
    }


    async _addEventListener(listener, eventName, callback, options) {
        const promise = new Promise(function(resolve, reject){
            if (!listener || !eventName || !callback || !options) {
                reject(new Error("onWupMessage fail"));
            }
            else{
                resolve("onWupMessage succ");
            }
          })
        if (listener && eventName && callback && options){
        if (Platform.OS == 'android') {
            //确定Listener和Name-Subscription的对应关系
            //与iOS的区别在于，我们用的RN框架的接口，所以参数需要另外加
            let subscription = DeviceEventEmitter.addListener(eventName, callback);
            NativeExtAdvance.registerUri(eventName, options);
            let nameMap = this._nativeEventListeners.get(listener);
            if (nameMap) {
                if (nameMap.has(eventName)) {
                    nameMap.get(eventName).remove();
                }
                nameMap.set(eventName, subscription)
            } else {
                nameMap = new Map();
                nameMap.set(eventName, subscription)
                this._nativeEventListeners.set(listener, nameMap);
            }
        } else {
            this._addEventEmitterListenerIfNeed();
            let uris = this._nativeEventListeners.get(eventName);
            if (!uris) {
                NativeExtAdvance.addEventListener(eventName, options);
                uris = new Map();
                this._nativeEventListeners.set(eventName, uris);
                let listeners = new Map();
                uris.set(options, listeners);
            }
            else{
                NativeExtAdvance.addEventListener(eventName, options);
                let listeners = uris.get(options);
                if (!listeners) {
                listeners = new Map();
                uris.set(options, listeners);
                }
            }
            let listeners = uris.get(options)
            listeners.set(listener, callback);
        }
    }
        return promise;
    }

    _removeEventListener(listener, eventName, options) {
        if (!listener || !eventName) {
            return;
        }
        if (Platform.OS == 'android') {
            let nameMap = this._nativeEventListeners.get(listener);
            if (nameMap) {
                let subscription = nameMap.get(eventName);
                if (subscription) {
                    subscription.remove();
                    nameMap.delete(eventName);
                    NativeExtAdvance.unregisterUri(eventName, null)
                }
            }
        } else {
            let uris = this._nativeEventListeners.get(eventName);
            if (uris) {
                let listeners = uris.get(options);
                if (listeners) {
                    listeners.delete(listener);
                    if(listeners.size == 0)
                    uris.delete(options);
                }
                if (uris.size == 0) {
                    this._nativeEventListeners.delete(eventName);
                    NativeExtAdvance.removeEventListener(eventName);
                }
            }
            this._removeEventEmitterListenerIfNeed();
        }
    }



    _addEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter = this.nativeExtAdvance().addListener(
                'hyExtAdvanceEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let name = reminder.name;
        let params = reminder.params;
        let uris = this._nativeEventListeners.get(name);
        if (!uris) {
            return;
        }
        let listeners = uris.get(params.uri);
        if (!listeners) {
            return;
        }
        for (let key of listeners.keys()) {
            let callback = listeners.get(key);
            callback(params);
        }
    }
}

const HYExtAdvance = new ExtAdvance();

export default HYExtAdvance;
/**
 * 虎牙内部封装 WebSocket 接口
 */
import {
    NativeModules,
    NativeEventEmitter,
} from 'react-native';

 import {
    arrayBufferToBase64,
    base64ToArrayBuffer
} from '../wup/unitPacket';

const NativeWebSocketModule = NativeModules.HYExtWebSocket;

const CONNECTING = 0;
const OPEN = 1;
const CLOSING = 2;
const CLOSED = 3;
const CLOSE_NORMAL = 1000;
let nextWebSocketId = 0;


class HYExtWebSocket {
    //当前类的对外静态变量（算作常量）
    static CONNECTING = CONNECTING;
    static OPEN = OPEN;
    static CLOSING = CLOSING;
    static CLOSED = CLOSED;

    //当前类的内部变量（算作常量）
    CONNECTING = CONNECTING;
    OPEN = OPEN;
    CLOSING = CLOSING;
    CLOSED = CLOSED;

    //当前类的对外实现方法
    onopen;
    onclose;
    onerror;
    onmessage;

    //TODO 因为暂时不支持blob，所以这个属性值也就没有用处
    binaryType;

    constructor(url) {
        this._eventEmitter = new NativeEventEmitter(NativeWebSocketModule);
        this._socketId = nextWebSocketId++;
        this._registerEvents();
        NativeWebSocketModule.connect({
            url: url
        }, this._socketId);
    }

    //发送数据
    send(data) {
        if (this.readyState === this.CONNECTING) {
            throw new Error("INVALID_STATE_ERROR");
        }

        if (typeof data === 'string') {
            NativeWebSocketModule.send(data, this._socketId);
            return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
            NativeWebSocketModule.sendBinary(arrayBufferToBase64(data), this._socketId);
            return;
        }

        throw new Error("Unsupported data type");
    }

    close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
            return;
        }
        this.readyState = this.CLOSING;
        this._close(code, reason);
    }

    _close(code, reason) {
        //TODO 这里官方是提供了上述参数的，但是虎牙中台提供的似乎不需要
        const statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        const closeReason = typeof reason === 'string' ? reason : '';
        NativeWebSocketModule.close(statusCode, closeReason, this._socketId);
    }


    _unregisterEvents() {
        this._subscriptions.forEach(e => e.remove());
        this._subscriptions = [];
    }

    _registerEvents() {
        this._subscriptions = [
            this._eventEmitter.addListener('kHYExtWebSocketMessage', (evt) => {
                if (evt.id !== this._socketId) {
                    return;
                }
                if(evt.data && evt.cmd == 3){
                    evt.data = base64ToArrayBuffer(evt.data);
                }
                if (this.onmessage) {
                    this.onmessage(evt);
                }
            }),
            this._eventEmitter.addListener('kHYExtWebSocketOpen', (evt) => {
                if (evt.id !== this._socketId) {
                    return;
                }
                this.readyState = this.OPEN;
                if (this.onopen) {
                    this.onopen(evt);
                }
            }),
            this._eventEmitter.addListener('kHYExtWebSocketClosed', (evt) => {
                if (evt.id !== this._socketId) {
                    return;
                }
                this.readyState = this.CLOSED;
                if (this.onclose) {
                    this.onclose(evt);
                }
                this._unregisterEvents();
                this.close();
            }),
            this._eventEmitter.addListener('kHYExtWebSocketFailed', (evt) => {
                if (evt.id !== this._socketId) {
                    return;
                }
                this.readyState = this.CLOSED;
                if (this.onerror) {
                    this.onerror(evt);
                }
                this._unregisterEvents();
                this.close();
            })
        ]
    }
}

export default HYExtWebSocket;
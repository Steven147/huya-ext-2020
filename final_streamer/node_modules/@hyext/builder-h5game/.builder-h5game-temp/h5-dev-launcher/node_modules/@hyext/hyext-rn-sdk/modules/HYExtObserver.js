/** 
 * @author: Huya
 * @date: 2019-03-22 19:16:15
 */

import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';

const NativeExtObserver = NativeModules.HYExtObserver;

let refrenceCount = 0;

class ExtObserver {
    constructor() {
        this._nativeEventListeners = new Map();
        this._nativeExtObserver = undefined;
    }

    nativeExtObserver() {
        if (this._nativeExtObserver == undefined) {
            this._nativeExtObserver = new NativeEventEmitter(NativeExtObserver);
        }
        return this._nativeExtObserver;
    }

    on(event, callback) {
        this._addEventListener(callback, event, callback);
    }

    off(event, callback) {
        this._removeEventListener(callback, event);
    }

    _addEventListener(listener, eventName, callback) {
        if (!listener || !eventName || !callback) {
            return;
        }
        if (Platform.OS == 'android') {
            //确定Listener和Name-Subscription的对应关系
            let subscription = DeviceEventEmitter.addListener(eventName, callback);
            let nameMap = this._nativeEventListeners.get(listener);
            if (nameMap) {
                if (nameMap.has(eventName)) {
                    nameMap.get(eventName).remove();
                }
                nameMap.set(eventName, subscription)
            } else {
                nameMap = new Map();
                nameMap.set(eventName, subscription)
                this._nativeEventListeners.set(listener, nameMap);
            }
        } else {
            this._addEventEmitterListenerIfNeed();
            let listeners = this._nativeEventListeners.get(eventName);
            if (!listeners) {
                listeners = new Map();
                this._nativeEventListeners.set(eventName, listeners);
            }
            listeners.set(listener, callback);
        }
    }

    _removeEventListener(listener, eventName) {
        if (!listener || !eventName) {
            return;
        }
        if (Platform.OS == 'android') {
            let nameMap = this._nativeEventListeners.get(listener);
            if (nameMap) {
                let subscription = nameMap.get(eventName);
                if (subscription) {
                    subscription.remove();
                    nameMap.delete(eventName);
                }
            }
        } else {
            let listeners = this._nativeEventListeners.get(eventName);
            if (listeners) {
                listeners.delete(listener);
                if (listeners.size == 0) {
                    this._nativeEventListeners.delete(eventName);
                }
            }
            this._removeEventEmitterListenerIfNeed();
        }
    }



    _addEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter = this.nativeExtObserver().addListener(
                'hyExtObserverEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter && this._nativeEventEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let event = reminder.event;
        let content = reminder.content;
        let listeners = this._nativeEventListeners.get(event);
        if (!listeners) {
            return;
        }
        for (let key of listeners.keys()) {
            let callback = listeners.get(key);
            callback(content);
        }
    }
}

const HYExtObserver = new ExtObserver();

export default HYExtObserver;
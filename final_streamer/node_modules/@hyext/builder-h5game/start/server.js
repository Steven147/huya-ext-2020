const os = require('os')
const fs = require('fs-extra')
const path = require('path')
const { spawn } = require('child_process')
const R = require('ramda')
const chokidar = require('chokidar')
const express = require('express')
const { createLauncher } = require('@hyext/game-launcher')
const { copyConfigAssets } = require('../lib/copyConfigAssets.js')

const constants = require('../constants.js')
const { getPublicIP, ERROR, HINT, simpleThrottle } = require('../utils/utils.js')
const { generateDevBuildResult } = require('./generateDevBuildResult.js')
const { buildMainEntry } = require('../lib/buildMainEntry.js')
const { transformEs6 } = require('../lib/transformEs6')
const { generateHtmlFromBuildConfig } = require('../lib/generateHtmlFromBuildConfig')

let isWatcherRunning = false
let isMetroRunning = false
let isExpressRunning = false
let isLauncherCreated = false
let launcherConfig = {}
let isDoneBuildResult = false

let isMetroStarted = false
let isExpressStarted = false

const getDevIP = config => {
  if (config.host && config.host !== 'localhost') {
    return config.host
  }

  return getPublicIP()
}

const childProcess = []
const killAllProcess = () => {
  for (let i = 0; i < childProcess.length; i += 1) {
    childProcess[i].kill()
  }
}
process.on('exit', killAllProcess)

function startServiceHint() {
  // 只需要在第一次显示
  if (isMetroStarted && isExpressStarted && !isDoneBuildResult) {
    HINT('\nHYEXT: 1. 开发服务已启动')
    HINT('\nHYEXT: 2. 将 hyext_dist/build-result 上传到 ext.huya.com')
    HINT('\nHYEXT: 3. 开始访问你的小程序吧:)')
  }
}

async function createRN({ projectDir, entryJs, launcherDir, engineType, config }) {
  if (isLauncherCreated) return

  isLauncherCreated = true

  HINT(`\nHYEXT: 生成 RN 项目: ${launcherDir}\n`)

  let launcherFactory = createLauncher
  if (config.customLauncher) {
    HINT(`使用自定义 launcher: ${config.customLauncher}`)
    try {
      const launcher = require(path.resolve(projectDir, config.customLauncher))
      launcherFactory = launcher.createLauncher
    } catch (err) {
      ERROR('未找到自定义 launcher')
      console.error(err)
      throw err
    }
  }
  const launcherConfig = await launcherFactory({
    extVersionType: 1, // 开发版本
    engineType,
    // hygFileList: [`${publicPath}${seperator}h5/hy-main.js`], // 开发版不打包
    hygFileList: [entryJs],
    hygFileType: 3, // 本地地址
    outputDir: launcherDir,
  })

  // 拷贝文件到 launcherDir
  copyConfigAssets({ projectDir, launcherDir, config })

  return launcherConfig
}

async function runExpressServer({ root, config }) {
  if (isExpressRunning) return

  isExpressRunning = true

  return new Promise((resolve, reject) => {
    const app = express()
    app.use(express.static(root))
    const port = constants.staticServer.port

    app.get('/', (req, res) => {
      res.send('HYEXT: WEB 开发服务')
    })

    app.listen(port, getDevIP(config), () => {
      isExpressStarted = true
      startServiceHint()
      resolve()
    })
  })
}

async function runMetroServer({ launcherDir, cliExtraArgs, config }) {
  if (isMetroRunning) return

  isMetroRunning = true

  return new Promise((resolve, reject) => {
    const extraArgs = Array.isArray(cliExtraArgs) ? cliExtraArgs : []

    const cliPath = path.resolve(launcherDir, 'node_modules', 'react-native', 'local-cli', 'cli.js')

    const service = spawn(
      'node',
      [
        cliPath,
        'start',
        '--projectRoot',
        launcherDir,
        ...extraArgs,
      ],
      {
        cwd: launcherDir,
        // stdio: 'inherit',
        shell: process.platform === 'win32',
      },
    )
    childProcess.push(service)

    process.on('exit', () => {
      HINT('\n关闭打包服务')
      service.kill()
    })

    // const buildResult = generateBuildResult({ buildConfig, SDKVersion, publicPath })

    process.on('uncaughtException', error => {
      console.log(error)
      // kill metro server
      ERROR(error)
      process.exit(1)
    })

    service.stdout.on('data', async (data) => {
      const output = data.toString()
      console.log(data.toString())

      if (output.includes('Loading dependency graph, done.')) {
        isMetroStarted = true
        startServiceHint()
      }
    })

    service.stderr.on('data', data => {
      ERROR(data.toString())
      reject(data)
    })

    resolve()
  })
}

function server({ projectDir, projectName, h5Dir, outputDir, config, engineType = 'h5game' }) {
  return new Promise((resolve, reject) => {
    HINT(`\nHYEXT: 监听 ${h5Dir} 文件改动`)
    const watcher = chokidar.watch(h5Dir, {
      persistent: true,
      interval: 800,
    })

    const h5PublicPath = `http://${getDevIP(config)}:${constants.staticServer.port}/`
    const RNPublicPath = `http://${getDevIP(config)}:${constants.metroServer.port}/`

    const launcherDir = path.resolve(constants.builderTempDir, `${projectName}-dev-launcher`)
    const h5OutputDir = path.resolve(outputDir, 'h5')

    fs.removeSync(h5OutputDir)
    fs.copySync(h5Dir, h5OutputDir)

    const watchAndConvert = async () => {
      if (config.convertEs6 === false) {
        // HINT(`\nHYEXT: 跳过 es6=>es5 的转化.`)
      } else {
        // 装换成 es5
        HINT(`\nHYEXT: 如需关闭转译 es6, 请查看 @hyext/builder-h5game 的 README`)
        HINT(`\nHYEXT: convert es6: ${h5OutputDir}`)
        const transformProcess = await transformEs6({
          inputDir: h5OutputDir,
          outputDir: h5OutputDir,
          mode: 'development',
        })

        childProcess.push(transformProcess)
      }
    }

    const handler = async () => {
      // 每次源码改变都重新复制到目的文件夹
      fs.copySync(h5Dir, h5OutputDir)
      HINT('\nHYEXT: 构建虎牙小程序...')

      try {
        // 生成多个 html, 注入 sdk/taf/改title
        const entryHtmlDict = generateHtmlFromBuildConfig({
          projectName,
          config,
          entryPath: path.resolve(h5OutputDir, 'index.html'),
          outputDir: h5OutputDir,
        })

        if (config.buildConfig.some(({ platform }) => ['pc', 'web'].includes(platform))) {
          await runExpressServer({ root: outputDir, config })
        } else {
          isExpressStarted = true
          startServiceHint()
        }

        if (config.buildConfig.some(({ platform }) => platform === 'app')) {
          await buildMainEntry({ entryPath: `${h5OutputDir}/index.html`  })
          launcherConfig = await createRN({ projectDir, entryJs: `${h5PublicPath}h5/`, launcherDir, engineType, config })
          await runMetroServer({ launcherDir, outputDir, config })
        } else {
          isMetroStarted = true
          startServiceHint()
        }

        if (!isDoneBuildResult) {
          isDoneBuildResult = true
          const buildConfig = R.prop('buildConfig', config)
          const H5Result = generateDevBuildResult({ buildConfig, publicPath: h5PublicPath, buildTypes: ['pc', 'web'], entryHtmlDict, engineType })
          const RNResult = generateDevBuildResult({ buildConfig, publicPath: RNPublicPath, buildTypes: ['app'], launcherConfig, engineType })
          resolve(R.mergeLeft(H5Result, RNResult))
        }

        HINT('\nHYEXT: 构建虎牙小程序[success]')
      } catch (err) {
        ERROR('\nHYEXT: 构建虎牙小程序[failed]')
        console.log(err)
        ERROR(err)
        process.exit(1)
      }
    }

    const throttleHandler = simpleThrottle(handler, 800)

    const setup = async () => {
      await watchAndConvert()

      if (!isWatcherRunning) {
        isWatcherRunning = true
        await handler()
      }

      watcher.on('add', throttleHandler)
      watcher.on('change', throttleHandler)
      watcher.on('unlink', throttleHandler)
    }

    watcher.on('ready', setup)
  })
}

module.exports = {
  server,
}

#!/usr/bin/env node

const commander = require('commander')
const path = require('path')
const _fs = require('fs')
const fs = require('fs-extra')
const glob = require('glob')
const inquirer = require('inquirer')
const chalk = require('chalk')
const spawn = require('cross-spawn')

const packageJson = require('../package.json');
const parseBuilderParam = require('../lib/parseBuilderParam.js')
const { buildTypesMap, extTypes, } = require('../constants')
const { addScriptToJson } = require('../lib/addScriptToJson')

let paramProjectName = ''

function validateDir({ projectName }) {
  const cliPath = process.argv[1]
  const projectAbsPath = path.resolve(process.cwd(), projectName || '')

  const isCliInProject = cliPath.startsWith(projectAbsPath)
  if (!isCliInProject) {
    return true
  }

  const jsonPath = path.resolve(projectAbsPath, 'package.json')
  if (!fs.existsSync(jsonPath)) {
    const proc = spawn.sync('npm', ['init', '-y'], { stdio: 'inherit',  cwd: projectAbsPath})
    if (proc.status !== 0) {
      console.log(
        chalk.red('未能生成 package.json, 请手动在项目目录内 npm init -y')
      )
      return false
    }
  }

  const packageJson = require(jsonPath)
  try {
    if (
      !Object.keys(packageJson.devDependencies || {}).includes('@hyext/cli')
      || !Object.keys(packageJson.dependencies || {}).includes('@hyext/cli')
    ) {
      if (!packageJson.devDependencies) {
        packageJson.devDependencies = {}
      }

      const getCliVersion = () => {
        // npm 的一个奇怪的行为:
        // 如果已安装的版本和 package.json 里的不匹配, 那么在安装其他依赖的时候, 已安装的版本会被删除
        const cliPkgJson = require(path.resolve(projectAbsPath, 'node_modules/@hyext/cli/package.json'))
        return cliPkgJson.version
      }

      packageJson.devDependencies['@hyext/cli'] = `^${getCliVersion()}`
      fs.outputJsonSync(jsonPath, packageJson, { spaces: 2 })
      return true
    }
  } catch (err) {
    console.log(
      chalk.red('package.json 没有 @hyext/cli 的依赖, 请执行 npm i -D @hyext/cli')
    )
    return false
  }

  return true
}

const filterType = ({ platform, role, checkedType, indentSpaces = 0 }) => extTypes.filter(item => item.platform === platform && item.role === role).map(item => ({
  name: `${' '.repeat(indentSpaces)}${item.name}`,
  value: item.extType,
  short: item.longName,
  checked: item.extType === checkedType,
}))

async function main() {
  const program = new commander.Command(packageJson.name)
    .usage(`init [project-name] [options]`)
    .arguments('[project-name]')
    .option('-b, --builder <builder>', 'custom builder')
    .action(name => { paramProjectName = name })
    .parse(process.argv);

  let builderInfo = parseBuilderParam(program.builder)


  if (!validateDir({ projectName: paramProjectName })) {
    return
  }

  ensureProjectDir(
    paramProjectName,
    async (projectName) => {
      let builderName = builderInfo.name

      if (!builderName) {
        builderName = '@hyext/builder-beyond'
      }

      /*
       *       if (!builderName) {
       *         builderName = await inquirer.prompt([
       *           {
       *             type: 'list',
       *             message: '请选择项目类型',
       *             name: 'library',
       *             choices: [
       *               {
       *                 name: '小程序',
       *               },
       *               {
       *                 name: '小游戏',
       *               },
       *             ],
       *           },
       *         ]).then(async answer => {
       *           const projectType = {
       *             '小程序': '@hyext/builder-beyond',
       *             '小游戏': 'whatever',
       *           }
       * 
       *           if (answer.library === '小程序') {
       *             return projectType[answer.library]
       *           }
       * 
       *           const gameTypes = {
       *             'laya 游戏': '@hyext/builder-laya',
       *             'h5 游戏': '@hyext/builder-h5game',
       *           }
       *           const gameBuilder = await inquirer.prompt([
       *             {
       *               type: 'list',
       *               message: '请选择小游戏类型',
       *               name: 'gameType',
       *               choices: Object.keys(gameTypes).map(name => ({ name })),
       *             }
       *           ]).then(answer => gameTypes[answer.gameType])
       * 
       *           return gameBuilder
       *         })
       *       }
       */

      const buildTypes = await inquirer.prompt([
        {
          type: 'checkbox',
      message: '请选择开发的终端类型(可多选)\n终端类型说明: https://dev.huya.com/docs#/extTypeIntro/list',
          name: 'buildTypes',
          choices: [
            new inquirer.Separator('\nPC主播端'),
            ...filterType({
              platform: 'pc',
              role: 'streamer',
            }),
            new inquirer.Separator('\n虎牙助手'),
            ...filterType({
              platform: 'app',
              role: 'streamer',
            }),

            new inquirer.Separator('\nPC观众端'),
            ...filterType({
              platform: 'pc',
              role: 'audience',
            }),
            new inquirer.Separator('\n虎牙主站'),
            ...filterType({
              platform: 'web',
              role: 'audience',
              checkedType: 'web_video_com',
            }),
            new inquirer.Separator('\n虎牙APP'),
            ...filterType({
              platform: 'app',
              role: 'audience',
            }),
          ],
          validate: answer => answer.length < 1 ? '请至少选择一个终端类型' : true,
          pageSize: 100,
        }
      ]).then(answer => {
        return answer.buildTypes.map(extType => {
          const target = extTypes.find(item => item.extType === extType)
          return {
            extType: target.extType,
            platform: target.platform,
          }
        })
      })

      installBuilder(
        (builderInfo.folder || builderName),
        () => createApp(projectName, builderName, { library: 'whatever', buildTypes }).then(onfinish),
        () => process.exit(1)
      )

      function onfinish() {
        console.log(`Project init ${chalk.green('finished')}.`)

        if (paramProjectName) {
          console.log(
            `  ${chalk.cyan('cd', projectName)} `
          )

          console.log('then run with:')
        }

        console.log(
          `  ${chalk.cyan('[npx ]hyext start')} `
        )
      }
    },
    () => {
      process.exit(1)
    })
}

function ensureProjectDir(dirname, calllback, failcallback) {
  const filesList = glob.sync('*')

  if (dirname) {
    if (invalid(dirname)) {
      console.log(chalk.red('Invalid project-name, please use only letters numbers and -'))
      failcallback()
      return
    }

    let exists = filesList.some(fileName => fileName == dirname)

    if (exists) {
      console.log(`${chalk.red('Error:')} '${chalk.green(dirname)}' is exist!`)
      failcallback()
    } else {
      fs.ensureDirSync(dirname)
      process.chdir(dirname)    // side effect!!! side effect!!! side effect!!!
      calllback(dirname)
    }
  } else {
    console.log(chalk.green('将在当前目录创建项目\n'))

    /*
     * 当采用局部安装时：
     * $ mkdir project-name
     * $ cd project-name
     * $ npm init
     * $ npm install hyext --save-dev
     * 
     * 当前目录通常会存在以下文件
     */
    const basename = path.basename(process.cwd())

    calllback(basename)


    // 当在当前目录 init 时, 不再限制项目名字, 以方便小游戏等非 npm 项目
    /*
     * if (invalid(basename)) {
     *   console.log(chalk.red('Invalid project-name, please use only letters numbers and -'))
     *   failcallback()
     *   return
     * }

     * const ignoreFiles = ['node_modules', 'package.json', 'package-lock.json', 'yarn.lock']
     * const otherFiles = filesList.filter(fileName => ignoreFiles.indexOf(fileName) == -1)

     * if (otherFiles.length > 0) {
     *   inquirer.prompt([{
     *     name: 'areYouSure',
     *     message: 'current directory is not empty, do you want to create a new project directly in the current directory?',
     *     type: 'confirm',
     *     default: true
     *   }])
     *     .then(answer => {
     *       answer.areYouSure ? calllback(basename) : failcallback()
     *     })
     *     .catch(failcallback)
     * } else {
     *   calllback(basename)
     * }
     */
  }

  function invalid(name) {
    return /[^A-Za-z0-9-]/.test(name + '')
  }
}

function installBuilder(val, calllback, failcallback) {
  let proc0 = null
  let proc1 = null

  const pkgJsonPath = path.resolve(process.cwd(), 'package.json')

  if (!fs.existsSync(pkgJsonPath)) {
    proc0 = spawn.sync('npm', ['init', '-y'], { stdio: 'inherit' })
  } else {
    proc0 = { status: 0 }
  }


  if (proc0.status === 0) {
    // proc1 = { status: 0 }
    proc1 = spawn.sync('npm', ['i', '-D', val], { stdio: 'inherit' })
  }

  if (proc0.status === 0 && proc1.status === 0) {

    const pkgContent = require(pkgJsonPath)
    const newPkgContent = addScriptToJson(pkgContent, {
      start: 'npx hyext start',
      release: 'npx hyext release',
      config: 'npx hyext config',
    })

    fs.outputJsonSync(pkgJsonPath, newPkgContent, { spaces: 2 })

    calllback()
  } else {
    failcallback()
  }
}

function createApp(projectName, builderName, extData) {
  const ROOT = process.cwd()
  let builder = require(path.resolve(ROOT, 'node_modules', builderName))
  let options = Object.assign({ contextPath: ROOT, projectName: projectName }, extData)

  _fs.writeFileSync(path.join(ROOT, '.gitignore'),
    `node_modules
dist
release
hyext_dist
hyext_release`
  )

  return builder.createApp(options).then(function ({ config, outputPath, releasePath }) {
    // const defaultConfig = require('../lib/default.config.json')
    const defaultConfig = require(path.resolve(__dirname, '..', 'lib', 'default.config.json'))
    let configJson = Object.assign({}, defaultConfig, {
      name: projectName,
      builder: {
        name: builderName,
        config
      }
    })

    if (outputPath) {
      configJson.outputPath = outputPath
    }

    if (releasePath) {
      configJson.releasePath = releasePath
    }


    const file = path.resolve(ROOT, 'project.config.json')
    fs.outputJsonSync(file, configJson, { spaces: 2 })
  })
}


main()

/*
 * @Author: your name
 * @Date: 2020-02-18 20:38:36
 * @LastEditTime: 2020-02-23 14:02:42
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: \hyliveext-rn-sdk\modules\HYExtContext.js
 */
/** 
 * @author: Huya
 * @date: 2019-03-25 14:33:40
 */

import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';
import hyExt from '../hyExt';

const NativeExtContext = NativeModules.HYExtContext;

export const liveInfoChanged = "liveInfoChanged";
export const liveStateChanged = "liveStateChanged";
export const barrageSubmit = "barrageSubmit";
export const loginSuccess = "loginSuccess";
export const loginFailed = "loginFailed";
export const extActivated = "extActivated"
const hyExtContextEvents = new Array(liveInfoChanged, liveStateChanged, barrageSubmit, loginSuccess, loginFailed,extActivated);

class ExtContext {
    constructor() {
        this._nativeEventListeners = new Map();
        this._nativeExtContext = undefined;
    }

    nativeExtContext() {
        if (this._nativeExtContext == undefined) {
            this._nativeExtContext = new NativeEventEmitter(NativeExtContext);
        }
        return this._nativeExtContext;
    }

    on(event, callback) {
        if (hyExtContextEvents.indexOf(event) != -1) {
            return this._addEventListener(event, null,callback);
        }
    }

    off(event, callback) {
        if (hyExtContextEvents.indexOf(event) != -1) {
            return this._removeEventListener(callback, event);
        }
    }

    onBarrageChange(options, callback) {
        return this._addEventListener( "barrageChange", options,callback);
    }


    offBarrageChange(callback) {
        return this._removeEventListener(callback, "barrageChange");
    }


    onGiftChange(options, callback) {
        return this._addEventListener("giftChange", options,callback);
    }

    offGiftChange(callback) {
        return this._removeEventListener(callback, "giftChange");
    }


    onSubscriberChange(options, callback) {
        return this._addEventListener( "subscriberChange",  options,callback);
    }

    offSubscriberChange(callback) {
        return this._removeEventListener(callback, "subscriberChange");
    }

    offBarrageChange(callback) {
        return this._removeEventListener(callback, "barrageChange");
    }


    onShareLiveNotice(callback) {
        return this._addEventListener("shareLiveNotice", null,callback);
    }

    offShareLiveNotice(callback) {
        return this._removeEventListener(callback, "shareLiveNotice");
    }


    onOpenGuardianNotice(callback) {
        return this._addEventListener("openGuardianNotice", null,callback);
    }

    offOpenGuardianNotice(callback) {
        return this._removeEventListener(callback, "openGuardianNotice");
    }

    onOpenNobleNotice(callback) {
        return this._addEventListener("openNobleNotice", null,callback);
    }

    offOpenNobleNotice(callback) {
        return this._removeEventListener(callback, "openNobleNotice");
    }

    onVipEnterBannerNotice(callback) {
        return this._addEventListener("vipEnterBannerNotice",  null,callback);
    }

    offVipEnterBannerNotice(callback) {
        return this._removeEventListener(callback, "vipEnterBannerNotice");
    }

    onLayoutChange(callback) {
        return this._addEventListener("onLayoutChange", null, callback);
    }

    showToast(message) {
        return NativeExtContext.showToast(message);
    }

    getUserInfo() {
        return NativeExtContext.getUserInfo();
    }

    getSubscriberSummary() {
        return NativeExtContext.getSubscriberSummary();
    }

    /**
     * 获取主播信息
     */
    getStreamerInfo() {
        return NativeExtContext.getStreamerInfo();
    }

    /**
     * 获取当前直播间信息
     * @return {Promise<object>} 返回直播间信息，{ gameName, liveCount, roomTitle, startTime, isOn}
     */
    getLiveInfo() {
        return NativeExtContext.getLiveInfo();
    }

    /**
     * 获取当前直播间周贡榜信息
     * @return {Promise<object>} 返回直播间周贡榜信息，{ userNick, userAvatarUrl, score}
     */
    getWeekRank() {
        return NativeExtContext.getWeekRank();
    }

    /**
     * 获取当前直播间粉丝榜信息
     * @return {Promise<object>} 返回直播间粉丝榜信息，{ userNick, userAvatarUrl, score, fansLevel}
     */
    getFansRank() {
        return NativeExtContext.getFansRank();
    }


    /**
     * 获取当前直播间贵宾信息
     * @return {Promise<object>} 返回直播间贵宾信息，{ userNick, userAvatarUrl, nobleLevel, nobleName}
     */
    getVip() {
        return NativeExtContext.getVip();
    }

    /**
     * 获取礼物配置
     */
    getGiftConf() {
        return NativeExtContext.getGiftConf();

    }

    getContextInfo() {
        return NativeExtContext.getContextInfo();
    }

    /**
     * 1.8.0修改成只监听最新的
     * @param {} eventName 
     * @param {*} options 
     * @param {*} callback 
     */
    _addEventListener(eventName, options, callback) {
        if (!eventName || !callback) {
            return;
        }
        if (Platform.OS == 'android') {
            //确定Listener和Name-Subscription的对应关系
            //与iOS的区别在于，我们用的RN框架的接口，所以参数需要另外加
            let subscription = DeviceEventEmitter.addListener(eventName, callback);
            let promise = NativeExtContext.postEventFilterOption(eventName, options);
            var lastSubscription = this._nativeEventListeners.get(eventName);
            if (lastSubscription) {
                lastSubscription.remove();
                this._nativeEventListeners.delete(eventName);
            }
            this._nativeEventListeners.set(eventName, subscription);
            return promise
        } else {
            this._addEventEmitterListenerIfNeed();
            if (this._nativeEventListeners.has(eventName)) {
                this._nativeEventListeners.delete(eventName);
                NativeExtContext.removeEventListener(eventName);
            }
            let promise = NativeExtContext.addEventListener(eventName, options);
            this._nativeEventListeners.set(eventName, callback);
            return promise
        }

    }

    _removeEventListener(listener, eventName) {
        if (!eventName) {
            return;
        }
        if (Platform.OS == 'android') {
            let subscription = this._nativeEventListeners.get(eventName);
            let promise = new Promise(function (resolve, reject) {
                resolve(true)
            })
            if (subscription) {
                subscription.remove();
                this._nativeEventListeners.delete(eventName);
                promise = NativeExtContext.removeEventFilterOption(eventName)

            }
            return promise;
        } else {
            let promise = new Promise(function (resolve, reject) {
                resolve(true)
            })
            if(this._nativeEventListeners.has(eventName)){
                this._nativeEventListeners.delete(eventName);
                promise = NativeExtContext.removeEventListener(eventName)
            }
            this._removeEventEmitterListenerIfNeed();
            return promise
        }
    }



    _addEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter = this.nativeExtContext().addListener(
                'hyExtContextEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            if(this._nativeEventEmitter){
                this._nativeEventEmitter.remove();
            }
        }
    }

    _dispatchEvent(reminder) {
        let name = reminder.name;
        let params = reminder.params;
        let callback = this._nativeEventListeners.get(name);
        if (!callback) {
            return;
        }
        callback(params);
    }
}

const HYExtContext = new ExtContext();

export default HYExtContext;
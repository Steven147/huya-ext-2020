const { spawn } = require('child_process')
const path = require('path')

const resolvePaths = [
  path.resolve(__filename, '..', 'node_modules', '@hyext', 'builder-h5game', 'node_modules'),
  path.resolve('node_modules', '@hyext', 'builder-h5game', 'node_modules'),
  path.resolve('node_modules'),
]

const babelPath = require.resolve('@babel/cli', { paths: resolvePaths })

const babelBinPath = path.resolve(babelPath, '..', 'bin', 'babel.js')

const presetPath = require.resolve('@babel/preset-env', { paths: resolvePaths })

const { ERROR, HINT } = require('../utils/utils.js')

function transformEs6({ inputDir, outputDir, mode = 'production' }) {
  HINT(`\nHYEXT-H5Game: 将 es6 转为 es5`)
  const args = [
    babelBinPath,
    inputDir,
    '--out-dir',
    outputDir,
    '--copy-files',
    '--config-file',
    path.resolve(__dirname, '../template/babel.config.js'),
    '--no-babelrc',
  ]

  if (mode === 'development') {
    args.push('--watch')
  }

  return new Promise((resolve, reject) => {
    const transformProcess = spawn(
      'node',
      args,
      {
        stdio: ['pipe', 'pipe', 'pipe'],
      },
    )

    let errOut = []
    transformProcess.stderr.on('data', data => {
      errOut = errOut.concat(data.toString().split('\n'))
    })

    transformProcess.on('close', async code => {
      if (code === 0) {
        resolve(transformProcess)
        return
      }

      reject(errOut.join('\n'))
    })

    transformProcess.stdout.on('data', data => {
      const dataStr = data.toString()

      const finishReg =  /Successfully compiled/ig

      if (finishReg.test(dataStr)) {
        resolve(transformProcess)
      }
    })

    // 通常是因为进程无法启动
    transformProcess.on('error', err => {
      reject(`es6 转换失败,${err}`)
    })
  })
}

module.exports = {
  transformEs6,
}

const { spawn, execSync } = require('child_process')
const path = require('path')
const ora = require('ora')
const { HINT, ERROR } = require('../utils/utils.js')

const CONVERTER_PATH = path.resolve(__dirname, '../bin/hy-convert.py')

// 优先使用 python2
// python3 在 windows 上有一些奇怪的问题
function getPythonVersion() {
  const cmdVersion = cmd => {
    const output = execSync(`${cmd} --version`, { encoding: 'utf8' }).toString()
    const [name, version] = output.split(' ').map(str => str.trim())
    return {
      cmd,
      version,
    }
  }

  const errors = []

  try {
    // python2 --version 会把版本号发到 stderr
    const result = cmdVersion(`python`)
    if (!result.version) {
      return {
        cmd: 'python',
        version: '2',
      }
    }
    return result
  } catch (err) {
    errors.push(err)
  }


  // python 不存在时试试 python3 --version
  try {
    return cmdVersion(`python3`)
  } catch (err) {
    errors.push(err)
  }


  console.log(errors.join('\n'))
  return {
    cmd: null,
    version: '',
  }
}

/*
 * 会在 entryPath 同级目录下生成: hy-adapter, gen 文件夹, hy-index.html, hy-main.js 等文件
*/
function buildMainEntry({ entryPath }) {
  HINT('\nHYEXT-H5Game: 检测 Python 安装状态')
  const { cmd, version } = getPythonVersion()
  if (!version) {
    ERROR('\nHYEXT-H5Game: Python 未安装或者未添加至 PATH')
    process.exit(1)
  }

  HINT(`\nHYEXT-H5Game: Python 版本: ${version}`)

  HINT('\nHYEXT-H5Game: 构建小游戏入口文件')

  return new Promise((resolve, reject) => {
    const convertProcess = spawn(
      cmd,
      [
        CONVERTER_PATH,
        entryPath,
      ],
      {
        stdio: 'inherit',
      },
    )

    convertProcess.on('close', code => {
      if (code === 0) {
        HINT('HYEXT-H5Game: 构建小游戏入口文件[done]')
        resolve()
        return
      }

      ERROR('HYEXT-H5Game: 构建小游戏入口文件[failed]')
      reject(new Error(`HYEXT-H5Game: 无法构建小游戏入口文件, 进程退出${code}`))
    })
  })
}

module.exports = {
  buildMainEntry,
}

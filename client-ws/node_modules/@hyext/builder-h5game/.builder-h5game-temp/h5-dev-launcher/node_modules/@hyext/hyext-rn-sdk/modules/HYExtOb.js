/** 
 * @author: Huya
 * @date: 2019-03-25 14:25:50
 */

/**
* HYExtOb
* @namespace HYExtOb
*/

import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';

const NativeExtOb = NativeModules.HYExtOb;

export const matchStatusChange = "matchStatusChange";
export const perspectiveChange = "perspectiveChange";
const hyExtObEvents = new Array(matchStatusChange, perspectiveChange);

class ExtOb {
    constructor() {
        this._nativeObListeners = new Map();
        this._nativeExtOb = undefined;
    }

    nativeExtOb() {
        if (this._nativeExtOb == undefined) {
            this._nativeExtOb = new NativeEventEmitter(NativeExtOb);
        }
        return this._nativeExtOb;
    }

    on(event, callback) {
        if (hyExtObEvents.indexOf(event) != -1) {
            return this._addEventListener(callback, event, callback);
        }
    }

    off(event, callback) {
        if (hyExtObEvents.indexOf(event) != -1) {
            return this._removeEventListener(callback, event);
        }
    }

    getMatchInfo(){
        return NativeExtOb.getMatchInfo();
    }

    setSplitedOBStream(params){
        return NativeExtOb.setSplitedOBStream(params);
    }

    setPerspective(param){
        return NativeExtOb.setPerspective(param);
    }
    
    getPerspectiveList(){
        return NativeExtOb.getPerspectiveList();
    }
    
    getCurrentPerspective(){
        return NativeExtOb.getCurrentPerspective();
    }

    async _addEventListener(listener, eventName, callback) {
        const promise = new Promise(function (resolve, reject) {
            if (!listener || !eventName || !callback) {
                reject(new Error("addExtObListener fail"));
            }
            else {
                resolve("addExtObListener succ");
            }
        })
        if (listener && eventName && callback) {
            if (Platform.OS == 'android') {
                let subscription = DeviceEventEmitter.addListener(eventName, callback);
                //NativeExtContext.postEventFilterOption(eventName, options);
                let nameMap = this._nativeObListeners.get(listener);
                if (nameMap) {
                    if (nameMap.has(eventName)) {
                        nameMap.get(eventName).remove();
                    }
                    nameMap.set(eventName, subscription)
                } else {
                    nameMap = new Map();
                    nameMap.set(eventName, subscription)
                    this._nativeObListeners.set(listener, nameMap);
                }
            } else {
                this._addEventEmitterListenerIfNeed();
                let listeners = this._nativeObListeners.get(eventName);
                if (!listeners) {
                    NativeExtOb.addEventListener(eventName);
                    listeners = new Map();
                    this._nativeObListeners.set(eventName, listeners);
                }
                listeners.set(listener, callback);
            }
        }
        return promise;
    }

    async _removeEventListener(listener, eventName) {
        const promise = new Promise(function (resolve, reject) {
            if (!listener || !eventName) {
                reject(new Error("removeEventListener fail"));
            }
            else {
                resolve("removeEventListener succ");
            }
        })
        if (listener && eventName) {
            if (Platform.OS == 'android') {
                let nameMap = this._nativeObListeners.get(listener);
                if (nameMap) {
                    let subscription = nameMap.get(eventName);
                    if (subscription) {
                        subscription.remove();
                        nameMap.delete(eventName);
                    //    NativeExtOb.removeEventListener(eventName);
                    }
                }
            } else {
                let listeners = this._nativeObListeners.get(eventName);
                if (listeners) {
                    listeners.delete(listener);
                    if (listeners.size == 0) {
                        this._nativeObListeners.delete(eventName);
                        NativeExtOb.removeEventListener(eventName);
                    }
                }
                this._removeEventEmitterListenerIfNeed();
            }
        }
        return promise;
    }




    _addEventEmitterListenerIfNeed() {
        if (this._nativeObListeners.size == 0) {
            this._nativeObEmitter = this.nativeExtOb().addListener(
                'hyExtObEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeObListeners.size == 0) {
            this._nativeObEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let name = reminder.name;
        let params = reminder.params;
        let listeners = this._nativeObListeners.get(name);
        if (!listeners) {
            return;
        }
        for (let key of listeners.keys()) {
            let callback = listeners.get(key);
            callback(params);
        }
    }
}

const HYExtOb = new ExtOb();

export default HYExtOb;
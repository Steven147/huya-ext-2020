/** 
 * @author: Huya
 * @date: 2019-03-25 14:33:40
 */

import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';

const NativeExtContext = NativeModules.HYExtContext;

export const liveInfoChanged = "liveInfoChanged";
export const liveStateChanged = "liveStateChanged";
export const barrageSubmit = "barrageSubmit";
export const giftSubmit = "giftSubmit";
export const subscribeSubmit = "subscribeSubmit";
export const loginSuccess = "loginSuccess";
export const loginFailed = "loginFailed";
export const viewportChange = "viewportChange";
export const videoStateChange = "videoStateChange";
export const videoFrameReduceStart = "videoFrameReduceStart";
export const videoFrameGrowEnd = "videoFrameGrowEnd";
export const obMatchBegin = "obMatchBegin";
export const obMatchEnd = "obMatchEnd";
export const perspectiveChange = "perspectiveChange";
export const openGuard = "openGuard";
export const openNoble = "openNoble";
export const vipEnter = "vipEnter";
const hyExtContextEvents = new Array(liveInfoChanged, liveStateChanged, barrageSubmit, giftSubmit, subscribeSubmit, loginSuccess, loginFailed, viewportChange, videoStateChange, videoFrameReduceStart, videoFrameGrowEnd, obMatchBegin, obMatchEnd, perspectiveChange, openGuard, openNoble, vipEnter);

class ExtContext {
    constructor() {
        this._nativeEventListeners = new Map();
        this._nativeExtContext = undefined;
    }

    nativeExtContext() {
        if (this._nativeExtContext == undefined) {
            this._nativeExtContext = new NativeEventEmitter(NativeExtContext);
        }
        return this._nativeExtContext;
    }

    on(event, callback) {
        if (hyExtContextEvents.indexOf(event) != -1) {
            return this._addEventListener(callback, event, callback, null);
        }
    }

    off(event, callback) {
        if (hyExtContextEvents.indexOf(event) != -1) {
            return this._removeEventListener(callback, event);
        }
    }

    leadSubscribe() {
        return NativeExtContext.leadSubscribe();
    }

    leadGift() {
        return NativeExtContext.leadGift();
    }

    leadBarrage() {
        return NativeExtContext.leadBarrage();
    }


    onBarrageChange(options, callback) {
        return this._addEventListener(callback, "barrageChange", callback, options);
    }

    onGiftChange(options, callback) {
        return this._addEventListener(callback, "giftChange", callback, options);
    }

    offBarrageChange() {
        return this._removeEventListener2("barrageChange");
    }

    offGiftChange() {
        return this._removeEventListener2("giftChange");
    }

    onAppear(callback) {
        return this._addEventListener(callback, "onAppear", callback, null);
    }

    onDisappear(callback) {
        return this._addEventListener(callback, "onDisappear", callback, null);
    }

    onLayoutChange(callback) {
        return this._addEventListener(callback, "onLayoutChange", callback, null);
    }

    onOpenGuardianNotice(params) {
        return this._addEventListener(params.callback, "openGuard", params.callback, null);
    }

    offOpenGuardianNotice() {
        return this._removeEventListener2("openGuard");
    }

    onOpenNobleNotice(params) {
        return this._addEventListener(params.callback, "openNoble", params.callback, null);
    }

    offOpenNobleNotice() {
        return this._removeEventListener2("openNoble");
    }

    onVipEnterBannerNotice(params) {
        return this._addEventListener(params.callback, "vipEnter", params.callback, null);
    }

    offVipEnterBannerNotice() {
        return this._removeEventListener2("vipEnter");
    }

    getSubscribeInfo() {
        return NativeExtContext.getSubscribeInfo();
    }

    showActivityBadge() {
        return NativeExtContext.showActivityBadge();
    }

    showToast(message) {
        return NativeExtContext.showToast(message);
    }

    getUserInfo() {
        return NativeExtContext.getUserInfo();
    }

    getStreamerInfo() {
        return NativeExtContext.getStreamerInfo();
    }

    getContextInfo() {
        return NativeExtContext.getContextInfo();
    }

    getLiveInfo() {
        return NativeExtContext.getLiveInfo();
    }

    getFansRank() {
        return NativeExtContext.getFansRank();
    }

    getVip() {
        return NativeExtContext.getVip();
    }

    getWeekRank() {
        return NativeExtContext.getWeekRank();
    }

    getGiftConf() {
        return NativeExtContext.getGiftConf();
    }

    sendGift(params) {
        return NativeExtContext.sendGift(params);
    }

    setSendBarrageTag(param) {
        return NativeExtContext.setSendBarrageTag(param);
    }

    setDisplayBarrageTags(param) {
        return NativeExtContext.setDisplayBarrageTags(param);
    }

    share(params) {
        return NativeExtContext.share(params);
    }

    getSafeAreaPosition(){
        return NativeExtContext.getSafeAreaPosition();
    }

    async _addEventListener(listener, eventName, callback, options) {
        const promise = new Promise(function (resolve, reject) {
            if (!listener || !eventName || !callback) {
                reject(new Error("addEventListener fail"));
            }
            else {
                resolve("addEventListener succ");
            }
        })
        if (listener && eventName && callback) {
            if (Platform.OS == 'android') {
                //确定Listener和Name-Subscription的对应关系
                //与iOS的区别在于，我们用的RN框架的接口，所以参数需要另外加
                let subscription = DeviceEventEmitter.addListener(eventName, (evt) => {
                    if(evt.roomId){
                        evt.roomId = parseInt(evt.roomId);
                    }
                    if(evt.startTime){
                        evt.startTime = parseInt(evt.startTime);
                    }
                    if(evt.endTime){
                        evt.endTime = parseInt(evt.endTime);
                    }
                    callback(evt);
                });
                NativeExtContext.postEventFilterOption(eventName, options);
                let nameMap = this._nativeEventListeners.get(listener);
                if (nameMap) {
                    if (nameMap.has(eventName)) {
                        nameMap.get(eventName).remove();
                    }
                    nameMap.set(eventName, subscription)
                } else {
                    nameMap = new Map();
                    nameMap.set(eventName, subscription)
                    this._nativeEventListeners.set(listener, nameMap);
                }
            } else {
                this._addEventEmitterListenerIfNeed();
                let listeners = this._nativeEventListeners.get(eventName);
                if (!listeners) {
                    NativeExtContext.addEventListener(eventName, options);
                    listeners = new Map();
                    this._nativeEventListeners.set(eventName, listeners);
                }
                else if (eventName == 'giftChange' || eventName == 'barrageChange') {
                    this._nativeEventListeners.delete(eventName);
                    NativeExtContext.removeEventListener(eventName);
                    NativeExtContext.addEventListener(eventName, options);
                    listeners = new Map();
                    this._nativeEventListeners.set(eventName, listeners);
                }
                listeners.set(listener, callback);
            }
        }
        return promise;
    }

    async _removeEventListener(listener, eventName) {
        const promise = new Promise(function (resolve, reject) {
            if (!listener || !eventName) {
                reject(new Error("removeEventListener fail"));
            }
            else {
                resolve("removeEventListener succ");
            }
        })
        if (listener && eventName) {
            if (Platform.OS == 'android') {
                let nameMap = this._nativeEventListeners.get(listener);
                if (nameMap) {
                    let subscription = nameMap.get(eventName);
                    if (subscription) {
                        subscription.remove();
                        nameMap.delete(eventName);
                        NativeExtContext.postEventFilterOption(eventName, null)
                    }
                }
            } else {
                let listeners = this._nativeEventListeners.get(eventName);
                if (listeners) {
                    listeners.delete(listener);
                    if (listeners.size == 0) {
                        this._nativeEventListeners.delete(eventName);
                        NativeExtContext.removeEventListener(eventName);
                    }
                }
                this._removeEventEmitterListenerIfNeed();
            }
        }
        return promise;
    }

    async _removeEventListener2(eventName) {
        const promise = new Promise(function (resolve, reject) {
            if (!eventName) {
                reject(new Error("removeEventListener fail"));
            }
            else {
                resolve("removeEventListener succ");
            }
        })
        if (eventName) {
            if (Platform.OS == 'android') {
                for (let key of this._nativeEventListeners.keys()) {
                    let nameMap = this._nativeEventListeners.get(key);
                    if (nameMap) {
                        let subscription = nameMap.get(eventName);
                        if (subscription) {
                            subscription.remove();
                            nameMap.delete(eventName);
                            NativeExtContext.postEventFilterOption(eventName, null)
                        }
                    }
                }
            } else {
                let listeners = this._nativeEventListeners.get(eventName);
                if (listeners) {
                        this._nativeEventListeners.delete(eventName);
                        NativeExtContext.removeEventListener(eventName);
                }
                this._removeEventEmitterListenerIfNeed();
            }
        }
        return promise;
    }



    _addEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter = this.nativeExtContext().addListener(
                'hyExtContextEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let name = reminder.name;
        let params = reminder.params;
        let listeners = this._nativeEventListeners.get(name);
        if (!listeners) {
            return;
        }
        for (let key of listeners.keys()) {
            let callback = listeners.get(key);
            callback(params);
        }
    }
}

const HYExtContext = new ExtContext();

export default HYExtContext;
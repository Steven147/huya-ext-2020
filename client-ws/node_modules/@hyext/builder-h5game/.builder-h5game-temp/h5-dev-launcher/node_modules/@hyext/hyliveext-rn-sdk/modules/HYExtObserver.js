/** 
 * @author: Huya
 * @date: 2019-03-22 19:16:15
 */

import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';

const NativeExtObserver = NativeModules.HYExtObserver;

let refrenceCount = 0;

class ExtObserver {
    constructor() {
        this._nativeEventListeners = new Map();
        this._nativeExtObserver = undefined;
    }

    nativeExtObserver() {
        if (this._nativeExtObserver == undefined) {
            this._nativeExtObserver = new NativeEventEmitter(NativeExtObserver);
        }
        return this._nativeExtObserver;
    }

    on(event, callback) {
        this._addEventListener(event, callback);
    }

    off(event) {
        this._removeEventListener(event);
    }

    emit(topic, message) {
        return NativeExtObserver.emit(topic, message);
    }

    onLocalMessage({ eventName, callback }) {
        this._addEventListener(eventName, callback);
        return NativeExtObserver.onLocalMessage(eventName);
    }

    offLocalMessage({ eventName }) {
        this._removeEventListener(eventName);
        return NativeExtObserver.offLocalMessage(eventName);
    }

    postLocalMessage({ eventName, message }) {
        return NativeExtObserver.postLocalMessage(eventName, message);
    }

    _addEventListener(eventName, callback) {
        if (!eventName || !callback) {
            return;
        }
        if (Platform.OS == 'android') {
            //确定Listener和Name-Subscription的对应关系
            let preSubscription = this._nativeEventListeners.get(eventName);
            if (preSubscription) {
                preSubscription.remove();
            }
            let subscription = DeviceEventEmitter.addListener(eventName, callback);
            this._nativeEventListeners.set(eventName, subscription);
        } else {
            this._addEventEmitterListenerIfNeed();
            let preCallback = this._nativeEventListeners.get(eventName);
            if (preCallback) {
                this._nativeEventListeners.delete(eventName);
            }
            this._nativeEventListeners.set(eventName, callback);
        }
    }

    _removeEventListener(eventName) {
        if (!eventName) {
            return;
        }
        if (Platform.OS == 'android') {
            let subscription = this._nativeEventListeners.get(eventName);
            if (subscription) {
                subscription.remove();
                this._nativeEventListeners.delete(eventName);

            }
        } else {
            if (this._nativeEventListeners.has(eventName)) {
                this._nativeEventListeners.delete(eventName);
            }
            this._removeEventEmitterListenerIfNeed();
        }
    }



    _addEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter = this.nativeExtObserver().addListener(
                'hyExtObserverEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let event = reminder.event;
        let content = reminder.content;
        let callback = this._nativeEventListeners.get(event);
        if(callback){
            callback(content);
        }
    }
}

const HYExtObserver = new ExtObserver();

export default HYExtObserver;
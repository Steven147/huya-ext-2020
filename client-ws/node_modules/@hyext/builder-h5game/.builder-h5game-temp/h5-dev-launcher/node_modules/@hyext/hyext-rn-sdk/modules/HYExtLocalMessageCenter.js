/** 
 * @author: Huya
 * @date: 2019-03-25 14:25:50
 */

/**
* HYExtLocalMessageCenter
* @namespace HYExtLocalMessageCenter
*/

import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';

const NativeExtLocalMessageCenter = NativeModules.HYExtLocalMessageCenter;

class ExtLocalMessageCenter {
    constructor() {
        this._nativeLocalMessageListeners = new Map();
        this._nativeExtLocalMessage = undefined;
    }

    nativeExtLocalMessage() {
        if (this._nativeExtLocalMessage == undefined) {
            this._nativeExtLocalMessage = new NativeEventEmitter(NativeExtLocalMessageCenter);
        }
        return this._nativeExtLocalMessage;
    }

    onLocalMessage(params) {
        return this._addEventListener(params.callback, params.eventName, params.callback);
    }

    offLocalMessage(params) {
        return this._removeEventListener(params.eventName);
    }

    postLocalMessage(params) {
        return NativeExtLocalMessageCenter.postLocalMessage(params);
    }

    async _addEventListener(listener, eventName, callback) {
        const promise = new Promise(function (resolve, reject) {
            if (!listener || !eventName || !callback) {
                reject(new Error("addExtLocalMessageListener fail"));
            }
            else {
                resolve("addExtLocalMessageListener succ");
            }
        })
        if (listener && eventName && callback) {
            if (Platform.OS == 'android') {
                //确定Listener和Name-Subscription的对应关系
                let subscription = DeviceEventEmitter.addListener(eventName, callback);
                // NativeExtLocalMessageCenter.addLocalMessageListener(eventName);
                let nameMap = this._nativeLocalMessageListeners.get(listener);
                if (nameMap) {
                    if (nameMap.has(eventName)) {
                        nameMap.get(eventName).remove();
                    }
                    nameMap.set(eventName, subscription)
                } else {
                    nameMap = new Map();
                    nameMap.set(eventName, subscription)
                    this._nativeLocalMessageListeners.set(listener, nameMap);
                }
            } else {
                this._addEventEmitterListenerIfNeed();
                let listeners = this._nativeLocalMessageListeners.get(eventName);
                if (!listeners) {
                    NativeExtLocalMessageCenter.addLocalMessageListener(eventName);
                    listeners = new Map();
                    this._nativeLocalMessageListeners.set(eventName, listeners);
                } else {
                    this._nativeLocalMessageListeners.delete(eventName);
                    NativeExtLocalMessageCenter.removeLocalMessageListener(eventName);
                    NativeExtLocalMessageCenter.addLocalMessageListener(eventName);
                    listeners = new Map();
                    this._nativeLocalMessageListeners.set(eventName, listeners);
                }

                listeners.set(listener, callback);
            }
        }
        return promise;
    }

    async _removeEventListener(eventName) {
        const promise = new Promise(function (resolve, reject) {
            if (!eventName) {
                reject(new Error("removeExtLocalMessageListener fail"));
            }
            else {
                resolve("removeExtLocalMessageListener succ");
            }
        })
        if (eventName && this._nativeLocalMessageListeners.size != 0) {
            if (Platform.OS == 'android') {
                for (let key of this._nativeLocalMessageListeners.keys()) {
                    let nameMap = this._nativeLocalMessageListeners.get(key);
                    if (nameMap) {
                        let subscription = nameMap.get(eventName);
                        if (subscription) {
                            subscription.remove();
                            nameMap.delete(eventName);
                            // NativeExtLocalMessageCenter.removeLocalMessageListener(eventName)
                        }
                    }
                }
            } else {
                let listeners = this._nativeLocalMessageListeners.get(eventName);
                if (listeners) {
                    this._nativeLocalMessageListeners.delete(eventName);
                    NativeExtLocalMessageCenter.removeLocalMessageListener(eventName);
                }
                this._removeEventEmitterListenerIfNeed();
            }
        }
        return promise;
    }




    _addEventEmitterListenerIfNeed() {
        if (this._nativeLocalMessageListeners.size == 0) {
            this._nativeLocalMessageEmitter = this.nativeExtLocalMessage().addListener(
                'extLocalMessage',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeLocalMessageListeners.size == 0) {
            this._nativeLocalMessageEmitter && this._nativeLocalMessageEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let name = reminder.name;
        let message = reminder.params.message;
        let listeners = this._nativeLocalMessageListeners.get(name);
        if (!listeners) {
            return;
        }
        for (let key of listeners.keys()) {
            let callback = listeners.get(key);
            callback(message);
        }
    }
}

const HYExtLocalMessageCenter = new ExtLocalMessageCenter();

export default HYExtLocalMessageCenter;
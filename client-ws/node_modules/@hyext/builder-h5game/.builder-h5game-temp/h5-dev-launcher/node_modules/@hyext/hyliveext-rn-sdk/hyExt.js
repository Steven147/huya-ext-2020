/** 
 * @author: Huya
 * @date: 2019-03-25 14:25:39
 */

import HYExtEBS from './modules/HYExtEBS'
import HYExtLog from './modules/HYExtLog'
import HYExtObserver from './modules/HYExtObserver'
import HYExtAppState from './modules/HYExtAppState'
import HYExtContext from './modules/HYExtContext'
//import HYExtTip from './modules/HYExtTip'
import HYExtStorage from './modules/HYExtStorage'
import HYExtFs from './modules/HYExtFs'
import HYExtEnv from './modules/HYExtEnv'
import HYExtVip from './modules/HYExtVip'
import HYExtAction from './modules/HYExtAction'
import HYExtAdvance from './modules/HYExtAdvance'
import HYExtStream from './modules/HYExtStream'
import HYExtPanel from './modules/HYExtPanel'
import HYExtOrder from './modules/HYExtOrder'
import HYExtView from './modules/HYExtView'
import {
   base64ToArrayBuffer,
   arrayBufferToBase64,
   createArrayBufferByWupReq,
   getWupStructByArrayBuffer,
   readWupObject
} from './wup/unitPacket'

/**
 * 虎牙扩展api
 * @namespace hyEXT
 */

export default {
   /** 
    * 监听后台消息
    * @module observer
    */
   observer: {
      /**
       * 监听后台消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 收到消息时回调 返回对应消息名的后台消息content
       */
      on(topic, callback) {
         HYExtObserver.on(topic, callback);
      },
      /**
       * 取消监听后台消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 调用observer.on()时传入的函数的引用
       */
      off(topic, callback) {
         HYExtObserver.off(topic);
      },
      /**
       * 小程序传递广播内容到宿主
       * @param {string} topic 发的消息名
       *  @param {string} message 消息内容
       * @return {Promise<object>} 返回toast是否显示成功
       */
      emit(topic, message) {
         return HYExtObserver.emit(topic, message);
      },

      onLocalMessage({ eventName, callback }) {
         return HYExtObserver.onLocalMessage({ eventName, callback });
      },

      offLocalMessage({ eventName }) {
         return HYExtObserver.offLocalMessage({ eventName });

      },

      postLocalMessage({ eventName, message }) {
         return HYExtObserver.postLocalMessage({ eventName, message });
      }

   },

   /**
    * 发送EBS请求
    *
    * @param {object} options 请求参数{ header, host, port, path, httpMethod, param, cookies }
    * @return {Promise<object>} 返回对应的value
    */
   requestEbs(options) {
      return HYExtEBS.requestEbs(options);
   },

   /**
    * 优化后的EBS请求
    * @param {object} options 请求参数{url, httpMethod, header, data, dataType}
    * @return {Promise<object>} 返回结果{data, status, header}
    */
   request(options) {
      var tmp = options.data;
      options.data = JSON.stringify(tmp);
      return HYExtEBS.request(options);
   },


   /** 
    * 日志
    * @module logger
    */
   logger: {

      /**
       * 打印debug 日志
       *
       * @param {*} args
       */
      debug(...args) {
         HYExtLog.debug(args);
      },
      /**
       * 打印info 日志
       *
       * @param {*} args
       */
      info(...args) {
         HYExtLog.info(args);
      },
      /**
       * 打印warn 日志
       *
       * @param {*} args
       */
      warn(...args) {
         HYExtLog.warn(args);
      },
      /**
       * 打印error 日志
       *
       * @param {*} args
       */
      error(...args) {
         HYExtLog.error(args);
      }
   },
   /** 
    * 直播间事件
    * @module context
    */
   context: {
      /**
       * 监听直播间消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 收到消息时回调 返回消息内容
       */
      on(topic, callback) {
         return HYExtContext.on(topic, callback);
      },
      /**
       * 取消监听直播间消息
       *
       * @param {string} topic 消息名
       * @param {function} callback 调用context.on()时传入的函数的引用
       */
      off(topic, callback) {
         return HYExtContext.off(topic, callback);
      },
      /**
       * 监听所有弹幕
       * @param {dictionary} options 弹幕筛选 sendNick：用户昵称关键字 content：弹幕内容关键字 nobleLevel：贵族等级 fansLevel：粉丝等级
       * @param {function} callback 弹幕信息回调 sendNick：发言人的昵称 senderAvatarUrl：发言人的头像地址 senderGender：发言人的性别 nobleLevel：发言人的贵族等级
         fansLevel：发言人的粉丝等级 content：弹幕内容
       */
      onBarrageChange(options, callback) {
         return HYExtContext.onBarrageChange(options, callback);
      },

      /**
      * 关闭监听所有弹幕
      * @param {function} callback 调用onBarrageChange()时传入的函数的引用
      */

      offBarrageChange(callback) {
         return HYExtContext.offBarrageChange(callback);
      },

      /**
        * 监听所有礼物
        * @param {dictionary} options 礼物筛选 sendNick：用户昵称关键字 itemName：礼物名称关键字 minSendItemCount：礼物数量超过这个值才监听 minSendItemComboHits：连击数量超过这个值才监听
        * @param {function} callback 礼物信息回调 包括sendNick：送礼人的昵称 senderAvatarUrl：送礼人的头像地址 itemName：礼物名称
         sendItemCount：礼物数量 sendItemComboHits：送礼连击数
        */
      onGiftChange(options, callback) {
         return HYExtContext.onGiftChange(options, callback);
      },

      /**
       * 关闭监听所有礼物
       * @param {function} callback 调用onGiftChange()时传入的函数的引用
       */
      offGiftChange(callback) {
         return HYExtContext.offGiftChange(callback);
      },

      onSubscriberChange(options, callback) {
         return HYExtContext.onSubscriberChange(options, callback);

      },

      offSubscriberChange(callback) {
         return HYExtContext.offSubscriberChange(callback);
      },



      /**
       * 监听分享直播间事件
       * @param {function} callback  分享直播间事件的回调，包括
       * actionUrl：直播间跳转链接  content： 分享内容  imageUrl: 分享图片的url
       * presenterUnionId: 主播unionId  roomId: 房间Id  shareType :分享类型，默认0
       * sharerNick 分享人的昵称
       * sharerUnionId 分享人的unionId
       * subtitle  直播间副标题
       * title 直播间标题
       */
      onShareLiveNotice(param) {
         var callback = param.callback;
         return HYExtContext.onShareLiveNotice(callback);
      },


      /**
       * 取消监听分享直播间事件
       * @param {function} callback  onShareLiveNotice()时传入的函数的引用
       */
      offShareLiveNotice(callback) {
         return HYExtContext.offShareLiveNotice(callback);
      },


      /**
      * 监听开通续费守护事件
      * @param {function} callback  开通续费守护事件
      */
      onOpenGuardianNotice(param) {
         var callback = param.callback;
         return HYExtContext.onOpenGuardianNotice(callback);
      },


      /**
       * 监听开通续费守护事件
       * @param {function} callback  onOpenGuardianNotice()时传入的函数的引用
       */
      offOpenGuardianNotice(callback) {
         return HYExtContext.offOpenGuardianNotice(callback);
      },

      /**
      * 监听开通续费贵族事件
      * @param {function} callback  开通续费贵族事件的回调
      */
      onOpenNobleNotice(param) {
         var callback = param.callback;
         return HYExtContext.onOpenNobleNotice(callback);
      },


      /**
       * 取消开通续费贵族事件
       * @param {function} callback  onOpenNobleNotice()时传入的函数的引用
       */
      offOpenNobleNotice(callback) {
         return HYExtContext.offOpenNobleNotice(callback);
      },

      /**
      * 监听高级用户进场事件
      * @param {function} callback  高级用户进场事件的回调
      */
      onVipEnterBannerNotice(param) {
         var callback = param.callback;
         return HYExtContext.onVipEnterBannerNotice(callback);
      },


      /**
       * 取消高级用户进场事件
       * @param {function} callback  onVipEnterBannerNotice()时传入的函数的引用
       */
      offVipEnterBannerNotice(callback) {
         return HYExtContext.offVipEnterBannerNotice(callback);
      },

      /**
       * 显示toast
       * @param {string} message toast中显示的消息
       * @return {Promise<object>} 返回toast是否显示成功
       */
      showToast(message) {
         return HYExtContext.showToast(message);
      },

      /**
       * 获取用户信息，目前返回昵称、头像信息
       * @return {Promise<object>} 返回用户信息，{ userNick, userAvatar }
       */
      getUserInfo() {
         return HYExtContext.getUserInfo();
      },

      getStreamerInfo() {
         return HYExtContext.getStreamerInfo();
      },
      /**
       * 获取当前主播的订阅概况
       * 订阅了当前直播间的订阅者的信息
       * @return {Promise<object>} 返回用户信息，{ subscribeSummary }
       */
      getSubscriberSummary() {
         return HYExtContext.getSubscriberSummary();
      },

      /**
       * 获取当前直播间信息
       * @return {Promise<object>} 返回直播间信息，{ gameName, liveCount, roomTitle, startTime, isOn}
       */
      getLiveInfo() {
         return HYExtContext.getLiveInfo();
      },

      /**
       * 获取当前直播间周贡榜信息
       * @return {Promise<object>} 返回直播间周贡榜信息，{ userNick, userAvatarUrl, score}
       */
      getWeekRank() {
         return HYExtContext.getWeekRank();
      },

      /**
       * 获取当前直播间粉丝榜信息
       * @return {Promise<object>} 返回直播间粉丝榜信息，{ userNick, userAvatarUrl, score, fansLevel}
       */
      getFansRank() {
         return HYExtContext.getFansRank();
      },

      /**
       * 获取当前直播间贵宾信息
       * @return {Promise<object>} 返回直播间贵宾信息，{ userNick, userAvatarUrl, nobleLevel, nobleName}
       */
      getVip() {
         return HYExtContext.getVip();
      },

      getGiftConf() {
         return HYExtContext.getGiftConf();
      },

      /**
      * 
      * @param {*} callback 入参 1 个，为变化后的布局数据, { screenWidth, screenHeight }
      */
      onLayoutChange(callback) {
         return HYExtContext.onLayoutChange(callback)
      },


      /**
      * 获取app信息，目前返回app版本、UA
      * @return {Promise<object>} 返回app信息，{ version, huyaUA }
      */

      getContextInfo() {
         return HYExtContext.getContextInfo();
      },
   },

   /**
    * 扩展加载完成回调，暂时直接掉回调
    *
    * @param {function} callback
    */
   onLoad(callback) {
      if (callback) {
         callback();
      }
   },
   /**
    * 注册App进入前台时回调
    *
    * @param {Function} callback
    */
   onEnterForeground(callback) {
      HYExtAppState.onEnterForeground(callback);
   },
   /**
    * 注册App进入后台时回调
    *
    * @param {Function} callback
    */
   onLeaveForeground(callback) {
      HYExtAppState.onLeaveForeground(callback);
   },


   storage: {

      /**
       * 
       * @param {string} key 
       * @return {Promise<object>} 返回value
       */
      getItem(key) {
         return HYExtStorage.getItem(key);
      },

      /**
       * 
       * @param {string} key String	键
       * @param {string} value String值
       * @return {Promise<object>} 返回成功失败
       */
      setItem(key, value) {
         return HYExtStorage.setItem(key, value);
      },

      /**
      * 
      * @return {Promise<object>} 返回keys	Array	键的集合
      */
      getKeys() {
         return HYExtStorage.getKeys();
      },
      /**
       * @param {string} key
       * @return {Promise<object>} 返回成功或者失败
       */
      removeItem(key) {
         return HYExtStorage.removeItem(key);
      }
   },

   fs: {

      /**
       * 图片上传
       */
      uploadImg() {
         return HYExtFs.uploadImg();
      }
   },

   env: {
      /**
      * 
      * 获取当前版本类型
      * @return {Promise<object>} 返回当前版本类型,1-开发版本,2-灰度版本,3-正式版本
      */
      getVersionType() {
         return HYExtEnv.getVersionType();
      },

      /**
       * 获取初始化参数,
       * 使用querystring解析rn bundle的查询串参数，返回给小程序
       */
      getInitialParam() {
         return HYExtEnv.getInitialParam();
      }
   },

   action: {
      /**
      * 
      * 控制小程序入口显示
      * @param {stsring} extTypes 要显示入口的小程序类型枚举值，以逗号分隔
      * @param {number} countDown （可选）入口显示的倒计时，单位是秒
      * @param {string} cornerMarkId （可选）入口显示的角标 默认枚举
      * @return {Promise<object>} 显示入口是否成功
      */
      showEntrance(param) {
         return HYExtAction.showEntrance(param);
      },

      /**
    * 
    * 控制小程序入口隐藏
    * @param {stsring} extTypes 要隐藏入口的小程序类型枚举值，以逗号分隔
    * @return {Promise<object>} 隐藏入口是否成功
    */
      hideEntrance(param) {
         return HYExtAction.hideEntrance(param);
      }
   },

   vip: {
      /**
      * 
      * 获取小程序授权token
      * @return {Promise<object>} 返回小程序授权token
      */
      getJWT() {
         return HYExtVip.getJWT();
      }
   },


   advance: {
      /**
      * 
      * 当前直播间信息
      * @return {Promise<object>} 返回直播间信息
      * @example resp对象示例
      {
         "aSid"    : xxx,
         "topSid"  : xcxc,
         "subSid"  : 2323,
         "presenterId" : 122,
         "presenterName" : "sdfdf"
      }
      */
      currentChannelInfo() {
         return HYExtAdvance.currentChannelInfo();
      },

      /**
      * 
      * 跳转登陆界面
      * @return {Promise<object>} 返回是否跳转成功
      */
      showLogin() {
         return HYExtAdvance.showLogin();
      },

      /**
    * 
    * 当前登陆用户相关信息
    * @return {Promise<object>} 返回当前登陆用户相关信息
    * @example resp对象示例
    {
       "imid": 424824622,
       "uid": 501925061,
       "status": "ok",
       "err_code": 0,
       "udbToken": "xxx",
       "avatarUrl":"xxx",
       "sex": "女",
       "name": "testrob",
       "sign": "",
       "userLevel": 0,
       "userCurrentExp": 0,
       "nextLevelExp": 0,
       "dailyExp": 0,
       "nobleInfo" : {
          isNoble:true,    //是否是贵族
          uid:123,         //用户uid
          validDate:1233,  //贵族有效期的时间戳
          nobleName:"",    //贵族名称
          nobleLevel:1,    //贵族等级(6:大帝,5:君王,4:公爵)
          nobleNick:"",    //用户昵称
          channelInfo : {
             tid : 123, //顶级频道
             sid : 123, //子频道
             pid : 123, //主播id
             presenterNick : "", //主播昵称
             isGuard : false,    //是否对应主播的守护
             guardLevel : 1,     //守护等级
             isFans : true,      //是否对应主播的粉丝
             fansLevel : 1,      //粉丝等级
             fansName  : "xx"    //粉丝名称
          }
       },
       "isThirdPartyLogin" : true //是否第三方登录
    }
    */
      getCurrentUserInfo() {
         return HYExtAdvance.getCurrentUserInfo();
      },

      /**
      * 数据埋点上报接口
      * 
      * @param {string} prod prod
      * @param {string} eid eid
      * @param {string} label label
      * @param {dictionary} extraInfo extra info
      * 
      * @return {Promise<object>} 返回是否上报成功
      * 
      * @link https://git.huya.com/exc/exc-docs/blob/master/%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/%E8%99%8E%E7%89%99%E5%B0%8F%E7%A8%8B%E5%BA%8F1.5.0/%E3%80%90APP_WEB_PC%E5%BC%80%E6%92%AD%E7%AB%AF_%E5%8A%A9%E6%89%8BAPP%E3%80%91%E5%BC%80%E5%8F%91%E5%86%85%E9%83%A8%E6%8E%A5%E5%8F%A3.md#hyextadvanceaddactioneventwithextrainfo
      */
      addActionEventWithExtraInfo(prod, eid, label, extraInfo) {
         return HYExtAdvance.addActionEventWithExtraInfo(prod, eid, label, extraInfo);
      },

      /**
   * 
   * 打开指定的Url
   * @return {Promise<object>} 返回是否打开成功
   */

      openUrl(param) {
         return HYExtAdvance.openUrl(param);
      },

      /**
    * 
    * 获取TId
    * @return {Promise<object>} 返回TId
    */

      getTid() {
         return HYExtAdvance.getTid();
      },

      /**
      * 
      * 发送taf请求
      * @return {Promise<object>} 返回请求返回的jce对象
      */

      async sendWup(cfg) {

         var rspClass = cfg.rspClass;
         var req = cfg.req;
         var strategy = cfg.strategy;

         var arrayBuffer = createArrayBufferByWupReq(cfg.servant, cfg.funcName, req);
         var arrayBufferStr = arrayBufferToBase64(arrayBuffer);
         cfg.unitPacket = arrayBufferStr;

         try {

            let responseData = await HYExtAdvance.sendWup(cfg);

            var responseBuf = base64ToArrayBuffer(responseData);

            var result = getWupStructByArrayBuffer(responseBuf, rspClass);



            return { rsp: result };
         } catch (error) {
            try {
               var buf = base64ToArrayBuffer(error.message);
               var resp = getWupStructByArrayBuffer(buf, rspClass);
               error.resp = resp;
            } catch (err) {
               HYExtLog.info('hyExt.advance.sendWup', 'decode resp failed:' + JSON.stringify(err));
            }
            HYExtLog.info("hyExt.advance.sendWup", "error :" + JSON.stringify(error));
            throw (error);
         }
      },

      /**
      * 
      * 监听taf信令
      * @param {Object} messageClass - 返回的jce对象类型
      * @param {String} uri - 监听uri
      * @param {Function} callback - 回调函数
      */

      onWupMessage(cfg) {
         var messageClass = cfg.messageClass;
         var uri = cfg.uri;
         var callback = cfg.callback;
         return HYExtAdvance.onWupMessage(uri, (params) => {
            if (params.uri == uri) {
               let responseData = params.message;
               var responseBuf = base64ToArrayBuffer(responseData);
               var result = readWupObject(responseBuf, messageClass);
               callback({ message: result });
            }
         });
      },

      /**
      * 
      * 送礼(无弹窗)
      * @param {dictionary} parmas 送礼 giftId：礼物Id giftCount：礼物数量
      * @return {Promise<object>} 返回送礼是否成功
      */

      sendGift(parmas) {
         return HYExtAdvance.sendGift(parmas);
      },
      /**
      * 
      * @param {*} callback 入参 1 个，为变化后的布局数据, { screenWidth, screenHeight }
      */
      onLayoutChange(callback) {
         return HYExtContext.onLayoutChange(callback)
      },

   },

   panel: {
      /**
       * 改变小程序面板的布局，包括显示位置和显示大小
       *    visible: true,
            ref: 'PLAYER',
            x: 0.25,
            y: 0.25,
            width: 0.5,
            height: 0.5
       */
      setLayout(layout) {
         return HYExtPanel.setLayout(layout)
      }
   },

   stream: {
      addExtraWhiteBoard(data) {
         return HYExtStream.addExtraWhiteBoard(data)
      },

      removeExtraWhiteBoard(data) {
         return HYExtStream.removeExtraWhiteBoard(data)
      },

      sendToExtraWhiteBoard(data) {
         return HYExtStream.sendToExtraWhiteBoard(data)
      }
   },

   order: {
      reportText(data) {
         return HYExtOrder.reportText(data);
      }
   },

   view: {
      createSubView(param) {
         return HYExtView.createSubView(param);
      },

      destroySubView(param) {
         return HYExtView.destroySubView(param);
      },

      hideCurrentView() {
         return HYExtView.hideCurrentView();
      },

      hideSubView(param) {
         return HYExtView.hideSubView(param);
      },

      /**
       * 
       * @param {*} param 
       * {
       *    subViewId: 'xxx'
       *  }
       *
       */
      showSubView(param) {
         return HYExtView.showSubView(param);
      }
   }

};
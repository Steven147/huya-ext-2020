/*
 * @Author: zhoujingxue
 * @Date: 2019-12-27 16:29:29
 * @LastEditTime : 2020-01-07 15:37:34
 * @FilePath: \hyliveext-rn-sdk\modules\HYExtAdvance.js
*/


import {
    NativeModules,
    Platform,
    DeviceEventEmitter,
    NativeEventEmitter
} from 'react-native';
import hyExt from '../hyExt';
import HYExtLog from './HYExtLog';


const NativeExtAdvance = NativeModules.HYExtAdvance;

class ExtAdvance {

    constructor() {
        this._nativeEventListeners = new Map();
        this._nativeExtAdvance = undefined;
    }


    nativeExtAdvance() {
        if (this._nativeExtAdvance == undefined) {
            this._nativeExtAdvance = new NativeEventEmitter(NativeExtAdvance);
        }
        return this._nativeExtAdvance;
    }


    showLogin() {
        return NativeExtAdvance.showLogin();
    }

    getCurrentUserInfo() {
        return NativeExtAdvance.getCurrentUserInfo();
    }

    currentChannelInfo() {
        return NativeExtAdvance.currentChannelInfo();
    }

    addActionEventWithExtraInfo(prod, eid, label, extraInfo) {
        return NativeExtAdvance.addActionEventWithExtraInfo(prod, eid, label, extraInfo);
    }

    openUrl(param) {
        return NativeExtAdvance.openUrl(param);
    }

    getTid() {
        return NativeExtAdvance.getTid();
    }

    sendWup(cfg) {
        return NativeExtAdvance.sendWup(cfg);
    }

    onWupMessage(uri, callback) {
        return this._addEventListener(callback, "onWupMessage", callback, {uri});
    }

    sendGift(params) {
        return NativeExtAdvance.sendGift(params);
    }

    async _addEventListener(listener, eventName, callback, options) {
        const promise = new Promise(function (resolve, reject) {
            if (!listener || !eventName || !callback || !options) {
                reject(new Error("onWupMessage fail"));
                return;
            }
            else {
                resolve("onWupMessage succ");
            }
        })
        if (Platform.OS == 'android') {
            //确定Listener和Name-Subscription的对应关系
            //与iOS的区别在于，我们用的RN框架的接口，所以参数需要另外加
            let subscription = DeviceEventEmitter.addListener(eventName, callback);
            let promise = NativeExtAdvance.addEventListener(eventName, options);
            // let uris = this._nativeEventListeners.get(eventName);
            // if (uris) {
            //     let listeners = uris.get(options);
            //     if (!listeners) {
            //         listeners = new Map();
            //         listeners.set(options, listener);
            //     }
            //     if (uris.has(options)) {
            //         uris.get(listener).remove();
            //     }
            //     uris.set(listener, subscription)
            // } else {
            //     uris = new Map();
            //     nameMap.set(listener, subscription);
            //     let listeners = new Map();
            //     uris.set(options, listeners);
            //     this._nativeEventListeners.set(eventName, nameMap);
            // }
            return promise
        } else {
            this._addEventEmitterListenerIfNeed();
            let uris = this._nativeEventListeners.get(eventName);
            if (!uris) {
                NativeExtAdvance.addEventListener(eventName, options);
                uris = new Map();
                this._nativeEventListeners.set(eventName, uris);
                let listeners = new Map();
                uris.set(options.uri, listeners);
            }
            else {
                NativeExtAdvance.addEventListener(eventName, options);
                let listeners = uris.get(options.uri);
                if (!listeners) {
                    listeners = new Map();
                    uris.set(options.uri, listeners);
                }
            }
            let listeners = uris.get(options.uri)
            listeners.set(listener, callback);
        }
        return promise;
    }

    _removeEventListener(listener, eventName, options) {
        if (!listener || !eventName) {
            return;
        }
        if (Platform.OS == 'android') {
            let nameMap = this._nativeEventListeners.get(listener);
            if (nameMap) {
                let subscription = nameMap.get(eventName);
                if (subscription) {
                    subscription.remove();
                    nameMap.delete(eventName);
                    NativeExtAdvance.postEventFilterOption(eventName, null)
                }
            }
        } else {
            let uris = this._nativeEventListeners.get(eventName);
            if (uris) {
                let listeners = uris.get(options);
                if (listeners) {
                    listeners.delete(listener);
                    if (listeners.size == 0)
                        uris.delete(options);
                }
                if (uris.size == 0) {
                    this._nativeEventListeners.delete(eventName);
                    NativeExtAdvance.removeEventListener(eventName);
                }
            }
            this._removeEventEmitterListenerIfNeed();
        }
    }



    _addEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter = this.nativeExtAdvance().addListener(
                'hyExtAdvanceEvent',
                (reminder) => {
                    this._dispatchEvent(reminder);
                }
            )
        }
    }

    _removeEventEmitterListenerIfNeed() {
        if (this._nativeEventListeners.size == 0) {
            this._nativeEventEmitter.remove();
        }
    }

    _dispatchEvent(reminder) {
        let name = reminder.name;
        let params = reminder.params;
        let uris = this._nativeEventListeners.get(name);
        if (!uris) {
            return;
        }
        let listeners = uris.get(params.uri);
        if (!listeners) {
            return;
        }
        for (let key of listeners.keys()) {
            let callback = listeners.get(key);
            callback(params);
        }
    }
}

const HYExtAdvance = new ExtAdvance();

export default HYExtAdvance;
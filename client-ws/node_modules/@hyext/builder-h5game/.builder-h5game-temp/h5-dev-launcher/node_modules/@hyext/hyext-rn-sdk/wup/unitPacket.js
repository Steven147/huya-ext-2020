
let window = require('abab');

let tf = require('./libwup.js'),
    Taf = tf.Taf;

/**
 * 将base64字符串转为对应的blob对象
 * @function base64ToBlob
 * @memberof Utils
 * @param {string} base64 - base64编码的字符串
 * @returns {blob}  对应的blob对象
 */
export function _base64ToBlob(base64) {
    var buffer = _base64ToArrayBuffer(base64);
    return new Blob([buffer]);
}

/**
 * 将base64字符串转为对应的arrayBuffer对象
 * @function base64ToArrayBuffer
 * @memberof Utils
 * @param {string} base64 - base64编码的字符串
 * @returns {arrayBuffer} 二进制utf8的arraybuffer
 */
export function base64ToArrayBuffer(base64) {
    var binary_string = window.atob(base64);
    var len = binary_string.length;
    var bytes = new Uint8Array(len);
    for (var i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
}

/**
 * 将ArrayBuffer转为对应的base64字符串
 * @function arrayBufferToBase64
 * @memberof Utils
 * @param {arrayBuffer} buffer - 二进制buffer对象
 * @returns {string}  base64编码的字符串
 */
export function arrayBufferToBase64(buffer) {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}

export function getWupStructByArrayBuffer(arrayBuffer , rspClass) {

    var wup = new Taf.Wup();
    wup.decode(arrayBuffer);

    var key = wup.newdata.get("tRsp") ? "tRsp" : "tResp";
    var wupStruct = new rspClass();
    wup.readStruct(key, wupStruct, rspClass);
    return wupStruct;
}

export function createArrayBufferByWupReq(serventName , func,  data) {

    var wup = new Taf.Wup();
    wup.setServant(serventName);
    wup.setFunc(func);
    wup.writeStruct("tReq", data);

    var os = wup.encode();
    
    return os.getBuffer();
}

export function readWupObject(arrayBuffer , rspClass) {

    var is = new Taf.JceInputStream(arrayBuffer);
    var wupStruct = new rspClass();
    wupStruct.readFrom(is);
    return wupStruct;
}
/** 
 * @author: Huya
 * @date: 2019-03-25 14:25:39
 */

import HYExtEBS from './modules/HYExtEBS'
import HYExtLog from './modules/HYExtLog'
import HYExtObserver from './modules/HYExtObserver'
import HYExtAppState from './modules/HYExtAppState'
import HYExtContext from './modules/HYExtContext'
//import HYExtTip from './modules/HYExtTip'
import HYExtStorage from './modules/HYExtStorage'
import HYExtFs from './modules/HYExtFs'
import HYExtAdvance from './modules/HYExtAdvance'
import HYExtVip from './modules/HYExtVip'
import HYExtVideo from './modules/HYExtVideo'
import HYExtContainerGesture from './modules/HYExtContainerGesture'
import HYExtEnv from './modules/HYExtEnv'
import HYExtPanel from './modules/HYExtPanel'
import HYExtPlayer from './modules/HYExtPlayer'
import HYExtOb from './modules/HYExtOb'
import HYExtOrder from './modules/HYExtOrder'
import HYExtLocalMessageCenter from './modules/HYExtLocalMessageCenter'
import HYExtWebSocket from './modules/HYExtWebSocket';
import HYExtStream from './modules/HYExtStream';
import HYExtBackend from './modules/HYExtBackend';

import {
   base64ToArrayBuffer,
   arrayBufferToBase64,
   createArrayBufferByWupReq,
   getWupStructByArrayBuffer,
   readWupObject
} from './wup/unitPacket'
/**
 * 虎牙扩展api
 * @namespace hyEXT
 */

export default {
   /** 
    * 监听后台消息
    * @module observer
    */
   observer: {
      /**
       * 监听后台消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 收到消息时回调 返回对应消息名的后台消息content
       */
      on(topic, callback) {
         HYExtObserver.on(topic, callback);
      },
      /**
       * 取消监听后台消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 调用observer.on()时传入的函数的引用
       */
      off(topic, callback) {
         HYExtObserver.off(topic, callback);
      },
      /**
       * 监听自身小程序消息
       *
       * @param {dictionary} params 消息名：evnetName 回调：callback
       */
      onLocalMessage(params) {
         return HYExtLocalMessageCenter.onLocalMessage(params);
      },
      /**
       * 取消监听自身小程序消息
       *
       * @param {dictionary} params 消息名：evnetName
       */
      offLocalMessage(params) {
         return HYExtLocalMessageCenter.offLocalMessage(params);
      },

      /**
       * 发送小程序消息
       *
       * @param {dictionary} params 消息名：evnetName 消息：message
       */
      postLocalMessage(params) {
         return HYExtLocalMessageCenter.postLocalMessage(params);
      }

   },

   /**
    * 发送EBS请求
    *
    * @param {object} options 请求参数{ header, host, port, path, httpMethod, param, cookies }
    * @return {Promise<object>} 返回对应的value
    */
   requestEbs(options) {
      return HYExtEBS.requestEbs(options);
   },

   request(options) {
      if (options.data) {
         try {
            options.data = JSON.stringify(options.data);
         } catch (error) {
            options.data = null;
         }
      }
      return HYExtEBS.request(options);
   },

   /** 
    * 日志
    * @module logger
    */
   logger: {

      /**
       * 打印debug 日志
       *
       * @param {*} args
       */
      debug(...args) {
         HYExtLog.debug(args);
      },
      /**
       * 打印info 日志
       *
       * @param {*} args
       */
      info(...args) {
         HYExtLog.info(args);
      },
      /**
       * 打印warn 日志
       *
       * @param {*} args
       */
      warn(...args) {
         HYExtLog.warn(args);
      },
      /**
       * 打印error 日志
       *
       * @param {*} args
       */
      error(...args) {
         HYExtLog.error(args);
      }
   },
   /** 
    * 直播间事件
    * @module context
    */
   context: {
      /**
       * 监听直播间消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 收到消息时回调 返回消息内容
       */
      on(topic, callback) {
         return HYExtContext.on(topic, callback);
      },
      /**
       * 取消监听直播间消息
       *
       * @param {string} topic 消息名
       * @param {function} callback 调用context.on()时传入的函数的引用
       */
      off(topic, callback) {
         return HYExtContext.off(topic, callback);
      },
      /**
      * 引导订阅
      * @return {Promise<object>} 返回引导订阅是否成功
      */
      leadSubscribe() {
         return HYExtContext.leadSubscribe();
      },

      /**
       * 引导送礼
       * @return {Promise<object>} 返回引导送礼是否成功 如果成功返回dictionary包括 sendNick：送礼人的昵称 senderAvatarUrl：送礼人的头像地址 itemName：礼物名称
         sendItemCount：礼物数量 sendItemComboHits：送礼连击数
       */
      leadGift() {
         return HYExtContext.leadGift();
      },
      /**
       * 引导弹幕
       * @return {Promise<object>} 返回引导弹幕是否成功 如果成功返回dictionary包括 sendNick：发言人的昵称 senderAvatarUrl：发言人的头像地址 senderGender：发言人的性别 nobleLevel：发言人的贵族等级
         fansLevel：发言人的粉丝等级 content：弹幕内容
       */
      leadBarrage() {
         return HYExtContext.leadBarrage();
      },

      /**
       * 监听所有弹幕
       * @param {dictionary} options 弹幕筛选 sendNick：用户昵称关键字 content：弹幕内容关键字 nobleLevel：贵族等级 fansLevel：粉丝等级
       * @param {function} callback 弹幕信息回调 sendNick：发言人的昵称 senderAvatarUrl：发言人的头像地址 senderGender：发言人的性别 nobleLevel：发言人的贵族等级
         fansLevel：发言人的粉丝等级 content：弹幕内容
       */
      onBarrageChange(options, callback) {
         return HYExtContext.onBarrageChange(options, callback);
      },

      /**
      * 关闭监听所有弹幕
      */

      offBarrageChange() {
         return HYExtContext.offBarrageChange();
      },

      /**
        * 监听所有礼物
        * @param {dictionary} options 礼物筛选 sendNick：用户昵称关键字 itemName：礼物名称关键字 minSendItemCount：礼物数量超过这个值才监听 minSendItemComboHits：连击数量超过这个值才监听
        * @param {function} callback 礼物信息回调 包括sendNick：送礼人的昵称 senderAvatarUrl：送礼人的头像地址 itemName：礼物名称
         sendItemCount：礼物数量 sendItemComboHits：送礼连击数
        */
      onGiftChange(options, callback) {
         return HYExtContext.onGiftChange(options, callback);
      },

      /**
       * 关闭监听所有礼物
       */
      offGiftChange() {
         return HYExtContext.offGiftChange();
      },

      /**
       * 监听开通守护
       * @param {function} callback 开通守护信息回调
       */

      onOpenGuardianNotice(params) {
         return HYExtContext.onOpenGuardianNotice(params);
      },

      /**
       * 关闭监听开通守护
       */
      offOpenGuardianNotice() {
         return HYExtContext.offOpenGuardianNotice();
      },

      /**
       * 监听开通贵族
       * @param {function} callback 开通贵族信息回调
       */
      onOpenNobleNotice(params) {
         return HYExtContext.onOpenNobleNotice(params);
      },

      /**
       * 关闭监听开通贵族
       */
      offOpenNobleNotice() {
         return HYExtContext.offOpenNobleNotice();
      },

      /**
       * 监听高级用户进场
       * @param {function} callback 高级用户进场信息回调
       */
      onVipEnterBannerNotice(params) {
         return HYExtContext.onVipEnterBannerNotice(params);
      },

      /**
       * 取消监听高级用户进场
       */
      offVipEnterBannerNotice() {
         return HYExtContext.offVipEnterBannerNotice();
      },

      /**
       * 获取当前观众是否订阅当前主播
       * @return {Promise<object>} 返回是否订阅
       */
      getSubscribeInfo() {
         return HYExtContext.getSubscribeInfo();
      },

      /**
       * 显示红点
       * @return {Promise<object>} 返回是否显示成功
       */
      showActivityBadge() {
         return HYExtContext.showActivityBadge();
      },
      /**
       * 显示toast
       * @param {string} message toast中显示的消息
       * @return {Promise<object>} 返回toast是否显示成功
       */
      showToast(message) {
         return HYExtContext.showToast(message);
      },

      /**
       * 获取用户信息，目前返回昵称、头像信息
       * @return {Promise<object>} 返回用户信息，{ userNick, userAvatar }
       */
      getUserInfo() {
         return HYExtContext.getUserInfo();
      },

      /**
       * 获取主播信息，目前返回主播昵称、主播头像、主播性别、房间Id、主播登记信息
       * @return {Promise<object>} 返回用户信息，{ streamerNick, streamerAvatarUrl, streamerSex, streamerRoomId, streamerLevel }
       */

      getStreamerInfo() {
         return HYExtContext.getStreamerInfo();
      },

      /**
       * 获取app信息，目前返回app版本、UA
       * @return {Promise<object>} 返回app信息，{ version, huyaUA }
       */

      getContextInfo() {
         return HYExtContext.getContextInfo();
      },

      /**
       * 获取直播间信息，目前返回直播品类gameName、人气liveCount、直播间介绍roomTitle、开播时间戳startTime、是否在播isOn。
       * 注意，如果不在播，则前面的信息都是上一次直播的信息，比如上次直播的品类、上次直播间介绍等。
       * @return {Promise<object>} 返回直播间信息，{ gameName, liveCount, roomTitle, startTime, isOn }
       */
      getLiveInfo() {
         return HYExtContext.getLiveInfo();
      },

      /**
       * 获取直播间的粉丝榜信息，目前返回粉丝标签名badgeName、榜单数据rank。
       * rank是一个数组，每一个item都是一个粉丝信息，包含用户昵称userNick、用户头像地址userAvatarUrl、贡献值score、粉丝等级fansLevel
       * @return {Promise<object>} 返回直播间粉丝榜信息，{ badgeName, rank }
       */
      getFansRank() {
         return HYExtContext.getFansRank();
      },

      /**
       * 获取直播间的贵宾信息，目前返回贵宾榜单数据vipList。
       * vipList是一个数组，每一个item都是一个贵宾信息，包含用户昵称userNick、用户头像地址userAvatarUrl、贵族等级nobleLevel、贵族名称nobleName
       * @return {Promise<object>} 返回直播间粉贵宾信息，{ vipList }
       */
      getVip() {
         return HYExtContext.getVip();
      },

      /**
       * 获取直播间的周贡榜信息，目前返回周贡榜榜单数据weekRank。
       * weekRank是一个数组，每一个item都是一个周贡榜用户信息，包含用户昵称userNick、用户头像地址userAvatarUrl、贡献值score
       * @return {Promise<object>} 返回直播间周贡榜信息，{ weekRank }
       */
      getWeekRank() {
         return HYExtContext.getWeekRank();
      },
      getGiftConf() {
         return HYExtContext.getGiftConf();
      },

      sendGift(parmas) {
         return HYExtContext.sendGift(parmas);
      },

      /**
       * 
       * @param {*} callback 入参 1 个，为变化后的布局数据, { screenWidth, screenHeight }
       */
      onLayoutChange(callback) {
         return HYExtContext.onLayoutChange(callback)
      },

      /**
       * 设置发送弹幕分组标签
       * @param {dictionary} param 设置发送弹幕分组标签 tag
       * @return {Promise<object>} 返回设置发送弹幕分组标签是否显示成功
       */
      setSendBarrageTag(param) {
         return HYExtContext.setSendBarrageTag(param);
      },

      /**
       * 设置显示弹幕分组标签
       * @param {dictionary} param 设置显示弹幕分组标签 tags
       * @return {Promise<object>} 返回t设置显示弹幕分组标签是否显示成功
       */
      setDisplayBarrageTags(param) {
         return HYExtContext.setDisplayBarrageTags(param);
      },

      /**
       * 分享直播间
       * @param {dictionary} params 包含分享到的平台platform、标题title、内容content、分享url shareURL、图片url imageURL、小程序url miniprogramUrl、mediaType 类型 1-web 5-微信小程序
       * @return {Promise<object>} 返回分享直播间是否成功
       */
      share(params) {
         return HYExtContext.share(params);
      },

      /**
      * 获取安全区域的位置
      * @return {Promise<object>} 返回安全区域位置 left, top, right, bottom
      */

      getSafeAreaPosition() {
         return HYExtContext.getSafeAreaPosition();
      }
   },

   /**
    * 扩展加载完成回调，暂时直接掉回调
    *
    * @param {function} callback
    */
   onLoad(callback) {
      if (callback) {
         callback();
      }
   },
   /**
    * 注册App进入前台时回调
    *
    * @param {Function} callback
    */
   onEnterForeground(callback) {
      HYExtAppState.onEnterForeground(callback);
   },
   /**
    * 注册App进入后台时回调
    *
    * @param {Function} callback
    */
   onLeaveForeground(callback) {
      HYExtAppState.onLeaveForeground(callback);
   },

   storage: {

      /**
       * 
       * @param {string} key 
       * @return {Promise<object>} 返回value
       */
      getItem(key) {
         return HYExtStorage.getItem(key);
      }
      /*
      setItem(key,value){
         return HYExtStorage.setItem({key:key,value:value});
      } */
   },
   fs: {

      /**
       * 
       * 上传图片
       * @return {Promise<object>} 返回是否上传成功，上传成功返回url
       */

      uploadImg() {
         return HYExtFs.uploadImg();
      }
   },

   advance: {
      /**
      * 
      * 当前直播间信息
      * @return {Promise<object>} 返回直播间信息
      * @example resp对象示例
      {
         "aSid"    : xxx,
         "topSid"  : xcxc,
         "subSid"  : 2323,
         "presenterId" : 122,
         "presenterName" : "sdfdf"
      }
      */
      currentChannelInfo() {
         return HYExtAdvance.currentChannelInfo();
      },

      /**
      * 
      * 跳转登陆界面
      * @param {dictionary} param - 登录类型，支持0-全屏登录，1-半屏登录,默认值为1
      * @return {Promise<object>} 返回是否跳转成功
      */
      showLogin(param = { type: 1 }) {
         return HYExtAdvance.showLogin(param);
      },

      /**
      * 
      * 当前登陆用户相关信息
      * @return {Promise<object>} 返回当前登陆用户相关信息
      * @example resp对象示例
      {
         "imid": 424824622,
         "uid": 501925061,
         "status": "ok",
         "err_code": 0,
         "udbToken": "xxx",
         "avatarUrl":"xxx",
         "sex": "女",
         "name": "testrob",
         "sign": "",
         "userLevel": 0,
         "userCurrentExp": 0,
         "nextLevelExp": 0,
         "dailyExp": 0,
         "nobleInfo" : {
            isNoble:true,    //是否是贵族
            uid:123,         //用户uid
            validDate:1233,  //贵族有效期的时间戳
            nobleName:"",    //贵族名称
            nobleLevel:1,    //贵族等级(6:大帝,5:君王,4:公爵)
            nobleNick:"",    //用户昵称
            channelInfo : {
               tid : 123, //顶级频道
               sid : 123, //子频道
               pid : 123, //主播id
               presenterNick : "", //主播昵称
               isGuard : false,    //是否对应主播的守护
               guardLevel : 1,     //守护等级
               isFans : true,      //是否对应主播的粉丝
               fansLevel : 1,      //粉丝等级
               fansName  : "xx"    //粉丝名称
            }
         },
         "isThirdPartyLogin" : true //是否第三方登录
      }
      */
      getCurrentUserInfo() {
         return HYExtAdvance.getCurrentUserInfo();
      },

      /**
       * 数据埋点上报接口
       * 
       * @param {string} prod prod
       * @param {string} eid eid
       * @param {string} label label
       * @param {dictionary} extraInfo extra info
       * 
       * @return {Promise<object>} 返回是否上报成功
       * 
       * @link https://git.huya.com/exc/exc-docs/blob/master/%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/%E8%99%8E%E7%89%99%E5%B0%8F%E7%A8%8B%E5%BA%8F1.5.0/%E3%80%90APP_WEB_PC%E5%BC%80%E6%92%AD%E7%AB%AF_%E5%8A%A9%E6%89%8BAPP%E3%80%91%E5%BC%80%E5%8F%91%E5%86%85%E9%83%A8%E6%8E%A5%E5%8F%A3.md#hyextadvanceaddactioneventwithextrainfo
       */
      addActionEventWithExtraInfo(prod, eid, label, extraInfo) {
         return HYExtAdvance.addActionEventWithExtraInfo(prod, eid, label, extraInfo);
      },

      /**
      * 
      * 打开指定的Url
      * @return {Promise<object>} 返回是否打开成功
      */

      openUrl(param) {
         return HYExtAdvance.openUrl(param);
      },

      /**
      * 
      * 获取TId
      * @return {Promise<object>} 返回TId
      */

      getTid() {
         return HYExtAdvance.getTid();
      },

      /**
      * 
      * 发送taf请求
      * @return {Promise<object>} 返回请求返回的jce对象
      */

      async sendWup(cfg) {

         var rspClass = cfg.rspClass;
         var req = cfg.req;
         var strategy = cfg.strategy ? cfg.strategy : 0;

         var arrayBuffer = createArrayBufferByWupReq(cfg.servant, cfg.funcName, req);
         var arrayBufferStr = arrayBufferToBase64(arrayBuffer);
         cfg.unitPacket = arrayBufferStr;

         cfg.req = null;
         cfg.rspClass = null;
         cfg.strategy = null;

         try {

            let responseData = await HYExtAdvance.sendWup(cfg, strategy);

            var responseBuf = base64ToArrayBuffer(responseData);

            var result = getWupStructByArrayBuffer(responseBuf, rspClass);


            return { rsp: result };
         } catch (error) {
            try {
               var buf = base64ToArrayBuffer(error.message);
               var resp = getWupStructByArrayBuffer(buf, rspClass);
               error.resp = resp;
            } catch (err) {
               HYExtLog.info('hyExt.advance.sendWup', 'decode resp failed:' + JSON.stringify(err));
            }
            HYExtLog.info("hyExt.advance.sendWup", "error :" + JSON.stringify(error));
            throw (error);
         }
      },

      /**
      * 
      * 监听taf信令
      * @param {Object} messageClass - 返回的jce对象类型
      * @param {String} uri - 监听uri
      * @param {Function} callback - 回调函数
      */

      onWupMessage(cfg) {
         var messageClass = cfg.messageClass;
         var uri = cfg.uri;
         var callback = cfg.callback;
         return HYExtAdvance.onWupMessage(uri, (params) => {
            if (params.uri == uri) {
               let responseData = params.message;
               var responseBuf = base64ToArrayBuffer(responseData);
               var result = readWupObject(responseBuf, messageClass);
               callback({ message: result });
            }
         });
      },

      /**
      * 
      * 送礼(无弹窗)
      * @param {dictionary} parmas 送礼 giftId：礼物Id giftCount：礼物数量
      * @return {Promise<object>} 返回送礼是否成功
      */

      sendGift(parmas) {
         return HYExtAdvance.sendGift(parmas);
      }



   },

   vip: {
      /**
      * 
      * 获取小程序授权token
      * @return {Promise<object>} 返回小程序授权token
      */
      getJWT() {
         return HYExtVip.getJWT();
      }
   },

   hyv: {
      /**
      * 
      * 打开视频播放页
      * @param {dictionary} id 视频播放页id 
      * @return {Promise<object>} 返回打开视频播放页是否成功
      */
      openVideo(id) {
         return HYExtVideo.openVideo(id);
      }
   },

   /** 
    * app端特有api
    * @module app
    */
   app: {

      /**
       * 
       * 禁止native 容器手势
       * @param {bool} disable 是否禁止native 容器手势
       * 
       */
      disableContainerGesture(disable) {
         HYExtContainerGesture.disableContainerGesture(disable);
      }
   },

   env: {
      /**
      * 
      * 获取当前版本类型
      * @return {Promise<object>} 返回当前版本类型,1-开发版本,2-灰度版本,3-正式版本
      */
      getVersionType() {
         return HYExtEnv.getVersionType();
      },

      /**
      * 
      * 获取初始化参数
      * @return {Promise<object>} 初始化参数
      */
      getInitialParam() {
         return HYExtEnv.getInitialParam();
      },

      /**
      * 
      * 获取小程序参数
      * @return {Promise<object>} 小程序参数
      */
      getExtInfo() {
         return HYExtEnv.getExtInfo();
      }
   },

   /**
    * 
    * 小程序显示的生命周期
    * @param {function} callback 回调函数
    */

   onAppear(callback) {
      return HYExtContext.onAppear(callback);
   },

   /**
   * 
   * 小程序隐藏的生命周期
   * @param {function} callback 回调函数
   */

   onDisappear(callback) {
      return HYExtContext.onDisappear(callback);
   },

   panel: {
      /**
       * 改变小程序面板的布局，包括显示位置和显示大小
       *    visible: true,
            ref: 'PLAYER',
            x: 0.25,
            y: 0.25,
            width: 0.5,
            height: 0.5
       */
      setLayout(layout) {
         return HYExtPanel.setLayout(layout)
      }
   },

   player: {

      /**
      * 
      * 播放点播视频
      * @param {dictionary} param url：视频地址 startTime：视频开始播放的时间
      * @return {Promise<object>} 返回播放点播视频是否成功
      */

      playVideo(params) {
         return HYExtPlayer.playVideo(params);
      },

      /**
      * 
      * 获取正在播放的点播视频状态
      * @return {Promise<object>} 返回正在播放的点播视频状态 duration：视频时长 currentTime：当前播放时间 isPlaying：是否正在播放
      */

      getVideoInfo() {
         return HYExtPlayer.getVideoInfo();
      },

      /**
      * 
      * 快进
      * @param {dictionary} param 快进的时间time
      * @return {Promise<object>} 返回快进是否成功
      */

      fastForward(param) {
         return HYExtPlayer.fastForward(param);
      },

      /**
      * 
      * 快退
      * @param {dictionary} param 快退的时间time
      * @return {Promise<object>} 返回快退是否成功
      */

      fastBackward(param) {
         return HYExtPlayer.fastBackward(param);
      },

      /**
      * 
      * 恢复直播
      * @return {Promise<object>} 返回恢复直播是否成功
      */

      resumeLive() {
         return HYExtPlayer.resumeLive();
      },

      /**
      * 
      * 获取当前播放的视频帧信息
      * @return {Promise<object>} 返回帧信息pts
      */

      getFrameData() {
         return HYExtPlayer.getFrameData();
      },

      /**
      * 
      * 监听播放器的视频消息
      * @param {string} topic 要监听的消息名称
      * @param {function} callback 监听播放器的视频消息回调
      */

      on(topic, callback) {
         return HYExtPlayer.on(topic, callback);
      },

      /**
      * 
      * 取消监听播放器的视频消息
      * @param {string} topic 要取消监听的消息名称
      * @param {function} callback 监听播放器的视频消息回调
      */

      off(topic, callback) {
         return HYExtPlayer.off(topic, callback);
      },

      /**
       * 
       * 小程序透明区域识别到单击手势，调用播放器单击事件
       * @param dictionary location，触点相对于RN根元素坐标
       * @return {Promise<object>} 返回调用是否成功
       */
      tapped(location) {
         return HYExtPlayer.tapped(location);
      },

      /**
       * 
       * 小程序透明区域识别到双击手势，调用播放器双击事件
       * @param dictionary location，触点相对于RN根元素坐标
       * @return {Promise<object>} 返回调用是否成功
       */
      doubleTapped(location) {
         return HYExtPlayer.doubleTapped(location);
      },

      /**
      * 
      * 设置视口区域
      * @param {dictionary} params x、y、scale
      * @return {Promise<object>} 返回设置视口区域是否成功
      */
      setViewport(params) {
         return HYExtPlayer.setViewport(params);
      },

      /**
      * 
      * 累加视口区域
      * @param {dictionary} params x、y、scale
      * @return {Promise<object>} 返回累加视口区域是否成功
      */
      addViewport(params) {
         return HYExtPlayer.addViewport(params);
      },

      /**
      * 
      * 设置视口区域
      * @return {Promise<object>} 返回视口区域的x、y、scale
      */
      getViewport() {
         return HYExtPlayer.getViewport();
      },

      /**
      * 
      * 切换线路
      * @param {dictionary} param line 线路
      * @return {Promise<object>} 返回切换线路是否成功
      */
      /*
       switchLine(param){
       return HYExtPlayer.switchLine(param);
       },
       */
      /**
      * 
      * 获取当前直播间支持的所有线路
      * @return {Promise<object>} 返回线路信息列表 lines
      */
      /*
       getLinesInfo(){
       return HYExtPlayer.getLinesInfo();
       },
       */
      /**
      * 
      * 获取当前正在播放的线路
      * @return {Promise<object>} 返回当前正在播放的线路 info
      */
      /*
       getCurrentLine(){
       return HYExtPlayer.getCurrentLine();
       },
       */


      /**
   * 
   * 设置视角
   * @param {dictionary} param pid 视角id
   * @return {Promise<object>} 返回设置视角是否成功
   */

      setPerspective(param) {
         return HYExtPlayer.setPerspective(param);
      },

      /**
      * 
      * 获取视角列表
      * @return {Promise<object>} 返回视角列表 list
      */

      getPerspectiveList() {
         return HYExtPlayer.getPerspectiveList();
      },

      /**
      * 
      * 获取当前视角
      * @return {Promise<object>} 返回当前视角 pid、name
      */

      getCurrentPerspective() {
         return HYExtPlayer.getCurrentPerspective();
      },

      /**
      * 
      * 获取当前视角
      * @param {dictionary} params row 行 column 列 width 宽 height 高
      * @return {Promise<object>} 返回当前视角 pid、name
      */

      setSplitedOBStream(params) {
         return HYExtPlayer.setSplitedOBStream(params);
      },

      /**
      * 
      * 获取视频画面的位置
      * @return {Promise<object>} 返回当前画面位置 left, top, right, bottom
      */

      getVideoPosition() {
         return HYExtPlayer.getVideoPosition();
      },

      /**
      * 
      * 获取播放器是否在缩小模式
      * @return {Promise<object>} 返回播放器是否在缩小模式
      */

      getLayoutInfo() {
         return HYExtPlayer.getLayoutInfo();
      },

      /**
      * 
      * 获取播放器状态
      * @return {Promise<object>} 返回播放器状态
      */

      getVideoState() {
         return HYExtPlayer.getVideoState();
      },

      /**
      * 
      * 小程序设置缓冲时间
      * @param dictionary time，缓冲时间
      * @return {Promise<object>} 返回调用是否成功
      */

      setBufferTime(param) {
         return HYExtPlayer.setBufferTime(param);
      }

   },
   ob: {
      /**
      * 
      * 获取比赛信息
      * @return {Promise<object>} 返回比赛信息 开始、结束
      */
      getMatchInfo() {
         return HYExtOb.getMatchInfo();
      },

      /**
      * 
      * 设置当前视角
      * @param {dictionary} params row 行 column 列 width 宽 height 高
      * @return {Promise<object>} 返回当前视角 pid、name
      */
   
      setSplitedOBStream(params){
         return HYExtOb.setSplitedOBStream(params);
      },

      /**
      * 
      * 设置视角
      * @param {dictionary} param pid 视角id
      * @return {Promise<object>} 返回设置视角是否成功
      */
     
     setPerspective(param){
      return HYExtOb.setPerspective(param);
      },
      
      /**
      * 
      * 获取视角列表
      * @return {Promise<object>} 返回视角列表 list
      */
     
      getPerspectiveList(){
      return HYExtOb.getPerspectiveList();
      },
      
      /**
      * 
      * 获取当前视角
      * @return {Promise<object>} 返回当前视角 pid、name
      */
     
      getCurrentPerspective(){
      return HYExtOb.getCurrentPerspective();
      },

            /**
       * 监听ob消息
       *
       * @param {string} topic 消息名
       * @param {Function} callback 收到消息时回调 返回消息内容
       */
      on(topic, callback) {
         return HYExtOb.on(topic, callback);
      },
      /**
       * 取消监听ob消息
       *
       * @param {string} topic 消息名
       * @param {function} callback 调用ob.on()时传入的函数的引用
       */
      off(topic, callback) {
         return HYExtOb.off(topic, callback);
      }

   },
   order: {
      reportText(parmas) {
         return HYExtOrder.reportText(parmas);
      }
   },
   stream: {
      /**
      * 
      * 获取是否是低延迟模式
      * @return {Promise<object>} 返回0-普通模式，1-低延迟模式
      */
      getViewerLatencyMode() {
         return HYExtStream.getViewerLatencyMode();
      },
      /**
      * 
      * 设置模式
      * @param dictionary mode，模式 0-普通模式，1-低延迟模式
      * @return {Promise<object>} 返回0-设置失败，1-设置成功
      */
      setViewerLatencyMode(parmas) {
         return HYExtStream.setViewerLatencyMode(parmas);
      }
   },

   backend: {
      /**
      * 
      * 通用查询后台状态接口
      * @param dictionary key-关键字 param-参数
      * @return {Promise<object>} 返回查询的后台状态
      */
      commonQuery(params) {
         return HYExtBackend.commonQuery(params);
      }
   },
   WebSocket: HYExtWebSocket
};
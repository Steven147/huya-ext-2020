/*
 * 实现描边字体
 */


import React,{ Component }  from 'react';
import {
  requireNativeComponent,
  View,

} from 'react-native';
import hyRequireNativeComponent from '../hyRequireNativeComponent';

const HYRNVideoAnimation = hyRequireNativeComponent('HYRNVideoAnimation');
const PropTypes = require('prop-types');
export default class RNVideoAnimation extends Component {
    constructor(props) {
        super(props);
  //  this._onStart = this._onStart.bind(this);
  //  this._onEnd = this._onEnd.bind(this);
  //  this._onError = this._onError.bind(this);
    }
    static propTypes = {
        ...View.propTypes,
        loop: PropTypes.bool,
        src: PropTypes.string,
        onStart: PropTypes.func,
        onEnd: PropTypes.func,
        onError: PropTypes.func
    }

    /*_onStart(event) {
        if (this.props.onStart) {
            this.props.onStart();
        }
    }

    _onEnd(event) {
        if (this.props.onEnd) {
            this.props.onEnd();
        }
    }

    _onError(event) {
        let data = event.nativeEvent;
        if (this.props.onError) {
            this.props.onError(data.error);
        }
    }*/

    render() {
        return (
            <HYRNVideoAnimation style={{flex:1, justifyContent:'flex-start'}} 
                ref = {(ref) => {
                    this.videoAnimationView = ref
                }}
                {...this.props}
                src={this.props.src || null}
                loop={this.props.loop || false}
                onStart={() => {
                    this.props.onStart && this.props.onStart();
                }}
                onEnd={() => {
                    this.props.onEnd && this.props.onEnd();
                }}
                onError={(err) => {
                    this.props.onError && this.props.onError(err);
                }}>
            </HYRNVideoAnimation>
        );
    }
}



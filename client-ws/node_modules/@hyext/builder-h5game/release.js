const path = require('path')
const fs = require('fs-extra')
const archiver = require('archiver')
const glob = require('glob')
const minimatch = require('minimatch')
const chalk = require('chalk')

function release({ contextPath, projectName, builderConfig, releasePath, ignorePatterns, cmdConfig, cmdCompress }) {
  const releaseDir = path.resolve(releasePath, projectName)
  const releaseZip = path.resolve(releasePath, `${projectName}.zip`)

  fs.removeSync(releaseZip)
  fs.removeSync(releaseDir)
  fs.ensureDirSync(releaseDir)

  let fileList = glob.sync('**', { dot: true, nodir: true, ignore: 'node_modules/**' })

  ignorePatterns.forEach(pattern => {
    fileList = fileList.filter(minimatch.filter(`!${pattern}`, { matchBase: true, dot: true }))
  })

  fileList.forEach(file => {
    console.log(
      chalk.cyan(`  ${chalk.green(file)}`),
    );


    if (file === 'project.config.json' && cmdConfig) {
      console.log(
        chalk.red(`\n  使用配置文件 ${cmdConfig} 替换 zip 包的 project.config.json\n`),
      )
      fs.copySync(cmdConfig, path.join(releaseDir, file))
    } else {
      fs.copySync(file, path.join(releaseDir, file))
    }
  })

  let compress = null

  if (cmdCompress !== false) {
    console.log(
      chalk.cyan(`compress ... `),
    );

    compress = new Promise((resolve, reject) => {
      const output = fs.createWriteStream(releaseZip)
      const archive = archiver('zip', { zlib: { level: 9 } })

      output.on('close', resolve)
      archive.on('warning', err => (err.code === 'ENOENT' ? console.log(err) : reject(err)))
      archive.on('error', reject)

      archive.pipe(output)
      archive.directory(releaseDir, projectName)
      archive.finalize()
    })
  } else {
    compress = Promise.resolve()
  }

  compress.then(() => {
    console.log(
      chalk.cyan(`项目已打包完毕, zip 包位于 ${chalk.green(releasePath)} 文件夹下`),
    );

    console.log(
      `${chalk.cyan('现在你可以将 zip 包上传到开发者中心了')}`,
    );
  }).catch(console.log)
}

module.exports = {
  release,
}

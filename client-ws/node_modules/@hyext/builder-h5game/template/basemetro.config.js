const path = require('path');
const pathSep = path.sep;
const fs = require('fs');

// 利用 handle 模板替换以下值
const PROJECT_DIR = '{{ BUILDER_NEORN_ENV_projectDir }}'
const IS_BUILDING_STREAMER_BUNDLE = {{ BUILDER_NEORN_ENV_isBuildingStreamerBundle }}
const IMAGE_BASE_URI = '{{ BUILDER_NEORN_ENV_imageBaseURI }}'

if (process.env.NODE_PACK_DEBUG === 'true') {
  console.log(`HYEXT-H5Game: metro_config, PROJECT_DIR: ${ PROJECT_DIR }`)
  console.log(`HYEXT-H5Game: metro_config, IS_BUILDING_STREAMER_BUNDLE: ${ IS_BUILDING_STREAMER_BUNDLE }`)
  console.log(`HYEXT-H5Game: metro_config, IMAGE_BASE_URI: ${ IMAGE_BASE_URI }`)
}

function getBaseModules(isStreamer) {
  // 这个文件是通过模板渲染生成的, 所以不想引入任何自定义文件(路径不确定)
  const sdkBaseName = isStreamer ? 'hyliveext-rn-sdk' : 'hyext-rn-sdk'

  const modulesPath = path.resolve(
    PROJECT_DIR,
    'node_modules',
    '@hyext',
    sdkBaseName,
    'baseModules',
  )
  const depreactePath = path.resolve(
    PROJECT_DIR,
    'node_modules',
    sdkBaseName,
    'baseModules',
  )

  if (fs.existsSync(modulesPath)) {
    return new Set(fs.readFileSync(modulesPath).toString().split('\n'));
  }

  if (fs.existsSync(depreactePath)) {
    return new Set(fs.readFileSync(depreactePath).toString().split('\n'));
  }

  return new Set()
}

const kiwiBaseModules = getBaseModules(false)
const streamerBaseModules = getBaseModules(true)


function moduleIdFactory() {
  return modulePath => {
    let name = '';
    if (modulePath.startsWith(PROJECT_DIR)) {
      //裁掉 /Users/xxx/xxx
      name = modulePath.substr(PROJECT_DIR.length + 1);
    }

    //RN JS 全部以 RN_ 开头
    if (modulePath.includes('node_modules' + pathSep + 'react-native' + pathSep + 'Libraries' + pathSep)) {
      return `RN_${path.basename(modulePath, '.js')}`
    }

    name = name.replace('.js', '');

    //路径分隔符换成 _
    const regExp = pathSep == '\\' ? new RegExp('\\\\', 'g') : new RegExp(pathSep, 'g');
    name = name.replace(regExp, '_');

    //把业务/base jsbundle 里的非 node_modules 里的模块 id 都带上根目录名
    if (modulePath.includes(PROJECT_DIR) && !modulePath.includes('node_modules')) {
      let basename = path.basename(PROJECT_DIR)
      //小程序的 path.basename 需要替换成 open-sdk
      //线上运行的小程序全都是从 open-sdk require，所以这里只能继续目录名映射
      if (basename === 'hyext-rn-sdk' || basename === 'hyliveext-rn-sdk') {
        basename = 'open-sdk'
      }
      name = basename + '_' + name;
    }

    //用户端小程序打包
    const extRequireReg = /(node_modules_hyext-rn-sdk|node_modules_@hyext_hyext-rn-sdk)/ig
    if (extRequireReg.test(name)) {
      name = name.replace(extRequireReg, 'open-sdk')
    }


    //主播端小程序打包
    const liveExtRequireReg = /(node_modules_hyliveext-rn-sdk|node_modules_@hyext_hyliveext-rn-sdk)/ig
    if (liveExtRequireReg.test(name)) {
      name = name.replace(liveExtRequireReg, 'open-sdk')
      // console.log(`\n====主播端小程序打包, node_modules_hyliveext-rn-sdk => open-sdk : ${name}`)
    }

    return name;
  };
}


function processModuleFilter(module) {
  const modulePath = module['path']

  // const entryFile = process.argv[process.argv.indexOf('--entry-file') + 1]
  // const isStreamer = entryFile.indexOf('streamer') >= 0
  const isStreamer = IS_BUILDING_STREAMER_BUNDLE

  const inNmfolder = modulePath.includes(path.sep + 'node_modules' + path.sep)

  const moduleId = moduleIdFactory()(modulePath)


  if (!isStreamer) {
    if (kiwiBaseModules) {
      if (kiwiBaseModules.has(moduleId)) {
        if (process.env.NODE_PACK_DEBUG === 'true') {
          console.log(`HYEXT-H5Game: skip ${moduleId} in kiwiBaseModules `)
        }
        return false;
      }
    } else {
      if (inNmfolder) {
        return false;
      }
    }
  } else {
    if (streamerBaseModules) {
      if (streamerBaseModules.has(moduleId)) {
        if (process.env.NODE_PACK_DEBUG === 'true') {
          console.log(`HYEXT-H5Game: skip ${moduleId} in streamerBaseModules`)
        }
        return false;
      }
    } else {
      if (inNmfolder) {
        return false;
      }
    }
  }

  if (modulePath.indexOf('__prelude__') >= 0) {
    const hook = Buffer.from(process.env.HYEXT_RN_HOOK || '', 'base64')
    const hookText = hook.toString('ascii')
    console.log(`\nNEO: hook in env`, hookText)
    module.output[0]['data']['code'] = hookText
    return true;
  }

  let code = module.output[0]['data']['code'];

  const nameMatch = code.match(/name[ ]*:[ ]*"(\S+?)"/);
  if (nameMatch && nameMatch.length >= 1) {
    const name = nameMatch[1];

    const typeMatch = code.match(/type[ ]*:[ ]*"(\S+?)"/);
    if (typeMatch && typeMatch.length >= 1) {
      const type = typeMatch[1];

      const relativeMatch = code.match(/httpServerLocation[ ]*:[ ]*"(\S+?)"/);
      if (relativeMatch && relativeMatch.length >= 1) {
        const relativePath = relativeMatch[1];

        //read image baseURI from process.env
        const uri = IMAGE_BASE_URI + relativePath + '/' + name + '.' + type
        code = code.replace(/\.exports=(\S+)}/, `.exports={uri:"${uri}"}}`)
        module.output[0]['data']['code'] = code
      }
    }
  }

  return true;
}

module.exports = {
  serializer: {
    createModuleIdFactory: moduleIdFactory,
    processModuleFilter: processModuleFilter
  },
  projectRoot: PROJECT_DIR,
};

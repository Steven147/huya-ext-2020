/*
 *"buildConfig": [
 *    {
 *      "extType": "app_panel",
 *      "platform": "app"
 *    },
 *    {
 *      "extType": "app_popup",
 *      "platform": "app"
 *    },
 *    {
 *      "extType": "zs_anchor_panel",
 *      "platform": "app"
 *    }
 *  ]
*/

/* ====>
 * [{
 *   "appType": "kiwi", // kiwi/streamer
 *   "extType": "panel", // panel/popup
 *   "registerComponent": ["bar"],
 * }]
 */
function neoRnConfigAdapter ({ projectDir, RNBuildEntrys }) {
  const getTypes = beyondType => {
    let appType = 'kiwi' // 观众端
    let extType = 'panel'

    if (beyondType.startsWith('zs_anchor_')) {
      appType = 'streamer' // 助手端
    }

    if (beyondType.endsWith('_popup')) {
      extType = 'popup'
    }

    return { appType, extType }
  }

  const getRegisterComponentsFromEntry = (entryAbsPath) => {
    const entryContent = fs.readFileSync(entryAbsPath).toString()

    const reg = /^[ ]*(AppRegistry.registerComponent|registerApp)\(['"](\S+)['"]/gm

    const components = []

    let match = reg.exec(entryContent)
    while (match) {
      components.push(match[2])
      match = reg.exec(entryContent)
    }

    return components
  }

  return RNBuildEntrys.map(config => {
    const result = {
      entry: config.entry,
      ...getTypes(config.extType),
      registerComponent: []
    }

    if (config.registerComponent) {
      result.registerComponent = config.registerComponent
      return result
    }

    const components = getRegisterComponentsFromEntry(path.resolve(projectDir, config.entry))
    if (components.length <= 1) {
      result.registerComponent = components
      return result
    }

    if (result.extType === 'popup') {
      result.registerComponent = components.filter(cmp => cmp.endsWith('-popup'))
      return result
    }

    if (result.extType === 'panel') {
      result.registerComponent = components.filter(cmp => !cmp.endsWith('-popup'))
      return result
    }

    return result
  })
}

const fs = require('fs-extra')
const path = require('path')
const cheerio = require('cheerio')
const crypto = require('crypto')

const { getPublicIP, ERROR, HINT } = require('../utils/utils.js')

const PREPROCESS_FILE_NAME = 'hyext-preprocess.js'

function injectTaf({ content }) {
  const $ = cheerio.load(content)
  $('body').prepend(`<script src='https://a.msstatic.com/huya/hd/cdn_libs/wsChannel2.min.js'></script>`)
  return $.html()
}

function injectSDK({ content, platform, webSDKVersion }) {
  // HINT(`\n SDK 类型: ${platform}, 版本: ${webSDKVersion}`)
  const $ = cheerio.load(content)
  $('body').prepend(`<script src='https://hyext.msstatic.com/hy-ext/${webSDKVersion}/hy-ext-${platform}.js'></script>`)
  return $.html()
}

function injectMeta({ content, extType, platform }) {
  const $ = cheerio.load(content)
  $('head').append(`<meta name="hyext-design-width" content="">`)
  $('head').append(`<meta name="hyext-type" content="${extType}">`)
  $('head').append(`<meta name="hyext-platform" content="${platform}">`)

  return $.html()
}

function injectPreProcess({ content }) {
  const $ = cheerio.load(content)
  $('body').prepend(`<script src='./${PREPROCESS_FILE_NAME}'></script>`)

  return $.html()
}

function replaceTitle({ content, title }) {
  const $ = cheerio.load(content)
  $('head title').text(title)

  return $.html()
}

function extractInlineScript({ content, entryPath }) {
  const $ = cheerio.load(content)
  $('script').each((idx, el) => {
    if (!$(el).attr('src')) {
      const scriptContent = $(el).html()
      const contentMd5 = crypto
        .createHash('md5')
        .update(scriptContent)
        .digest('hex')
        .slice(0, 6)

      const filename = `hyext-extract-${idx}-${contentMd5}.js`
      const destPath = path.resolve(path.dirname(entryPath), filename)

      fs.writeFileSync(destPath, scriptContent)
      $(el).replaceWith(`<script src='./${filename}'></script>`)
    }
  })

  return $.html()
}

/*
 * 生成不同的入口 html 文件
 */
function generateHtmlFromBuildConfig({ projectName, entryPath, outputDir, config }) {
  const content = fs.readFileSync(entryPath, { encoding: 'utf8' }).toString()

  fs.copyFileSync(path.resolve(__dirname, PREPROCESS_FILE_NAME), path.resolve(outputDir, PREPROCESS_FILE_NAME))

  const { useTaf, webSDKVersion = 'latest', buildConfig, webTitle = '虎牙小游戏' } = config

  // HINT(`\nHYEXT: 注入 title: ${webTitle}`)
  const contentWithTitle = replaceTitle({ content, title: webTitle })

  const entryHtmlDict = {}

  buildConfig.forEach(({ extType, platform }) => {
    // 小心覆盖项目的原有文件
    const filename = `${projectName}-hyext-${extType}.html`
    entryHtmlDict[extType] = filename

    const dest = path.resolve(outputDir, filename)

    // script 标签用的是 prepend插入, 所以需要最先执行的请放后面
    // HINT(`\nHYEXT: 在文件 ${filename} 注入 sdk`)
    let newContent = injectSDK({ content: contentWithTitle, platform, webSDKVersion })

    if (useTaf) {
      // HINT(`\nHYEXT: 注入 Taf`)
      newContent = injectTaf({ newContent })
    }

    newContent = injectMeta({ content: newContent, platform, extType })

    newContent = injectPreProcess({ content: newContent })

    newContent = extractInlineScript({ content: newContent, entryPath })

    fs.writeFileSync(dest, newContent)
  })

  // console.log(entryHtmlDict)
  return entryHtmlDict
}

module.exports = {
  generateHtmlFromBuildConfig,
}

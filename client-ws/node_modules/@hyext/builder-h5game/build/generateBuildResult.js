const R = require('ramda')
const constants = require('../constants.js')
const { getHygName } = require('../utils/utils.js')

function generateBundleUrl({ extName, extUuid, component, SDKVersion, md5 }) {
  return `rnext=1&hyaction=newrn&rnmodule=${extName}-${extUuid}&rnentry=${component}&sdkversion=${SDKVersion}&rnmd5=${md5}`
}

function generateBuildResult({
  extUuid,
  extName,
  extVersionId,
  publicPath,
  buildConfig,
  bundleInfo,
  hygSize,
  hygMd5,
  entryHtmlDict,
  engineType,
}) {
  let buildResult = {}

  const seperator = publicPath.endsWith('/') ? '' : '/'

  console.log('\n======================')
  console.log(buildConfig)
  buildConfig.forEach(({ extType, platform }) => {
    if (['pc', 'web'].includes(platform)) {
      const result = {
        [extType]: {
          type: 'MINI_GAME_H5',
          content: {
            engine: engineType,
            // baseURI: 构建 web 必须要用 baseURI, 这点和 rn 不一样
            baseURI: `${publicPath}${seperator}h5/`,
            pages: [
              {
                path: `h5/${entryHtmlDict[extType]}`,
              },
            ],
          },
        },
      }

      buildResult = R.mergeDeepLeft(
        result,
        buildResult,
      )
    }

    if (platform === 'app') {
      Object.entries(bundleInfo[extType])
        .forEach(([mobilePlatform, { bundleName, md5, registerComponent, bundleDir, SDKVersion }]) => {

          const result = {
            [extType]: {
              type: 'MINI_GAME_RN',
              content: {
                engine: engineType,
                sdkVersion: SDKVersion,
                // baseURI 只有开发环境才用得上
                // baseURI: `${publicPath}${seperator}rn/`,
                baseURI: '',
                rnBundle: {
                  [mobilePlatform]: {
                    path: `rn/${bundleDir}/${bundleName}`,
                    entries: [
                      {
                        name: registerComponent,
                        url: generateBundleUrl({ extName, extUuid, component: registerComponent, SDKVersion, md5}),
                      },
                    ],
                  },
                },
                gameSource: [
                  {
                    name: getHygName({ extUuid, extVersionId }),
                    path: `${publicPath}${seperator}rn/${getHygName({ extUuid, extVersionId })}`,
                    size: hygSize,
                    md5: hygMd5,
                  },
                ],
              },
            },
          }

          buildResult = R.mergeDeepLeft(
            result,
            buildResult,
          )
        })
    }
  })

  return buildResult
}

module.exports = {
  generateBuildResult,
}
